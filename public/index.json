[{"title":"Belajar HTML #01: Pengenalan Dasar HTML","content":"","permalink":"https://gitkodachi.github.io/tutorial/html/pengenalan/"},{"title":"Belajar HTML #02: Memahami Tag, Element, dan Atribut dalam HTML","content":"Perbedaan Tag, Element, dan Atribut Tag: Penanda awalan dan akhiran \u0026lt;p\u0026gt;Ini paragraf\u0026lt;/p\u0026gt; ","permalink":"https://gitkodachi.github.io/tutorial/html/tag-element-atribut/"},{"title":"Belajar HTML #03: Membuat Paragraf di HTML","content":"Tag Paragraf Dasar \u0026lt;p\u0026gt;Ini adalah paragraf pertama.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Ini paragraf kedua dengan \u0026lt;br\u0026gt; baris baru\u0026lt;/p\u0026gt; ","permalink":"https://gitkodachi.github.io/tutorial/html/paragraf/"},{"title":"Tutorial HTML \u0026 CSS Dasar","content":"","permalink":"https://gitkodachi.github.io/tutorial/html/html-css/"},{"title":"Membuat CRUD Produk","content":"Menambahkan Produk Tambahkan kode berikut ke dalam controller:\nProdukController.php\rCopy\rpublic function store(Request $request)\r{\r$request-\u003evalidate([\r'nama' =\u003e 'required|max:45',\r'jenis' =\u003e 'required|max:45',\r// ...\r]);\r}\rRouting Tambahkan routing ke dalam file routes/web.php:\nweb.php\rCopy\rRoute::get('/produk/edit/{id}', [ProdukController::class, 'edit']);\rRoute::put('/produk/update/{id}', [ProdukController::class, 'update']);\rMenghapus Produk Berikut controller untuk menghapus:\ndestroy method\rCopy\rpublic function destroy(Produk $id)\r{\r$id-\u003edelete();\rreturn redirect()-\u003eroute('index.index')-\u003ewith('success', 'Data berhasil dihapus');\r}\rDownload SPSS 27\r","permalink":"https://gitkodachi.github.io/post/produk-crud/"},{"title":"Apa itu Git dan Kenapa Penting bagi Programmer?","content":"Git adalah salah satu tool yang sering digunakan dalam proyek pengembangan software.\nGit bahkan menjadi tool yang wajib dipahami oleh programmer, karena banyak digunakan di mana-mana.\nPada kesempatan ini kita akan belajar Git dari dasar.\nArtikel ini hanya akan membahas pengenalan Git saja. Untuk mempelajari Git lebih lanjut, saya sudah menyediakan link di bagian akhir.\nMengenal Git Git adalah salah satu sistem pengontrol versi (Version Control System) pada proyek perangkat lunak yang diciptakan oleh Linus Torvalds.\nPengontrol versi bertugas mencatat setiap perubahan pada file proyek yang dikerjakan oleh banyak orang maupun sendiri.\nGit dikenal juga dengan distributed revision control (VCS terdistribusi), artinya penyimpanan database Git tidak hanya berada dalam satu tempat saja.\nKeterangan gambar opsional\rSemua orang yang terlibat dalam pengkodean proyek akan menyimpan database Git, sehingga akan memudahkan dalam mengelola proyek baik online maupun offline.\nDalam Git terdapat Merge untuk menyebut aktifitas penggabungan kode.\nSedangkan pada VCS (Version Control System) yang terpusat‚Ä¶ database disimpan dalam satu tempat dan setiap perubahan disimpan ke sana.\nKeterangan gambar opsional\rVCS terpusat memiliki beberapa kekurangan:\nSemua tim harus terkoneksi ke jaringan untuk mengakses source-code; Tersimpan di satu tempat, nanti kalau server bermasalah bagaimana? Karena itu, Git hadir untuk menutupi kekurangan yang dimiliki oleh VCS terpusat.\nApa yang dilakukan oleh Git? Git sebenarnya akan memantau semua perubahan yang terjadi pada file proyek. Lalu menyimpannya ke dalam database.\nSebelum menggunakan Git:\nKeterangan gambar opsional\rSetelah menggunakan Git:\nKeterangan gambar opsional\rApa perbedaannya?\nSaat kita ingin menyimpan semua perubahan pada file, biasanya kita membuat file baru dengan ‚Äúsave as‚Äù. Lalu, file akan menumpuk dalam direktori proyek seperti pada ilustrasi di atas.\nTapi setelah menggunakan Git‚Ä¶\nHanya akan ada satu file dalam proyek dan perubahannya disimpan dalam database.\nGit hanya akan menyimpan delta perubahannya saja, dia tidak akan menyimpan seluruh isi file yang akan memakan banyak memori.\nGit memungkinkan kita kembali ke versi revisi yang kita inginkan.\nKenapa Git Penting Bagi Programmer? Keterangan gambar opsional\rJadi selain untuk mengontrol versi, git juga digunakan untuk kolaborasi.\nSaat ini Git menjadi salah satu tool terpopuler yang digunakan pada pengembangan software open source maupun closed source.\nGoogle, Microsoft, Facebook dan berbagai perusahaan raksasa lainnya menggunakan Git.\nJadi, buat kamu yang punya impian ingin bekerja di sana, maka kamu harus bisa Git.\nSelain itu, berikut ini ada beberapa menfaat yang akan kamu rasakan setelah bisa menggunakan Git.\nBisa menyimpan seluruh versi source code; Bisa paham cara kolaborasi dalam proyek; Bisa ikut berkontribusi ke proyek open-source; Lebih aman digunakan untuk kolaborasi, karena kita bisa tahu apa yang diubah dan siapa yang mengubahnya. Bisa memahami cara deploy aplikasi modern; Bisa membuat blog dengan SSG. dan sebagainya‚Ä¶ Apa Selanjutnya? Jadi, apakah kamu sudah mengenal git?\nBagus, selanjutnya silakan ikuti tutorial git berikut ini.\nTutorial Git #01: Cara Install Git dan Konfigurasi Awal\nTutorial Git #02: Membuat Repositori Baru dalam Proyek\nTutorial Git #03: Cara Membuat Repository Git Pada Proyek\nTutorial Git #04: Melihat Catatan Log Revisi\nTutorial Git #05: Melihat Perbandingan Revisi dengan Git Diff\nTutorial Git #06: Membatalkan Revisi\nTutorial Git #07: Menggunakan Cabang untuk Mencegah Konflik\nTutorial Git #08: Perbedaan Git Checkout, Reset, dan Revert\nTutorial Git #09: Bekerja dengan Remote Repository\nTutorial Git #10: Berkontribusi di Proyek Open Source\nP.S: Kalau link di atas masih mati, berarti masih dalam draf. Sering-sering dicek agar tidak ketinggalan. üòÑ\nüìñ Sumber: PetaniKode\r","permalink":"https://gitkodachi.github.io/tutorial/git/git-untuk-pemula/"},{"title":"Belajar Hugo #1: Instalasi Hugo di Windows, Mac, dan Linux","content":"Mengunduh Hgo Silahkan download versi terbaru dari [Hugo Release]((https://github.com/gohugoio/hugo/releases).\nInstalasi di Windows Unduh file zip Window (Extended Edition) Extrack ke folder \u0026lsquo;C:\\Hugo' Tambahkan path \u0026lsquo;C:\\Hugo' ke environment variables Instalasi di macOS (Menggunakan Homebrew) brew install hugo Instalasi di Linux (menggunakan Snap) sudo snap install hugo --channel=extended ‚úÖ Setelah instalasi, cek versi Hugo:\n","permalink":"https://gitkodachi.github.io/tutorial/hugo/01-installasi-hugo/"},{"title":"Belajar Git #1: Cara Install Git dan Konfigurasi Awal Yang Harus dilakukan","content":"Kita sudah mengenal Git pada tulisan sebelumnya. Selanjutnya Kita akan melakukan instalasi dan persiapan untuk mulai belajar Git.\nTulisan ini terbagi menjadi tiga bagian:\nCara Instalasi Git di Linux. Cara Instalasi Git di Windows. Konfigurasi Awal yang Harus dilkaukan Setelah Menginstal Git. Mari kita mulai\u0026hellip;\n1. Cara Install Git di Linux sudo apt install git atau\nsudo apt-install git Pada Fedora:\nyum install git Setelah itu , coba periksa versi yang terinstal dengan perintah:\ngit --version Pada komputer saya, versi yang terinstal adalah vers 2.50.0\nKeterangan gambar opsional\r2. Cara Install Git di Windows Instalasi Git di Windows memang tidak seperti di Linux yang ketik perintah langsung terinstal.\nKita harus men-download dulu, kemudian melakukan ritual next\u0026gt;next\u0026gt;finish.\nTapi dalam ritual tersebut, ada pilihan yang harus diperhatikan agar perintah git dapat dikenali di CMD.\nDownload Git Silakan buka website resminya Git. Kemudian unduh Git sesuai dengan arsitektur komputer kita. Kalau menggunakan 64bit, unduh yang 64bit. Begitu juga kalau menggunakan 32bit.\nLangkah-langkah Install Git di Windows Baiklah, mari kita mulai ritual instalnya. Silakan klik 2x file instaler Git yang sudah diunduh.\nKeterangan gambar opsional\rMaka akan muncul informasi lisensi Git, klik Next \u0026gt; untuk melanjutkan.\nKeterangan gambar opsional\rSelanjutnya menentukan lokasi instalasi. Biarkan saja apa adanya, kemudian klik Next \u0026gt;.\nKeterangan gambar opsional\rSelanjutnya pemilihan komponen, biarkan saja seperti ini kemudian klik Next \u0026gt;.\nKeterangan gambar opsional\rSelanjutnya pemilihan direktori start menu, klik Next \u0026gt;.\nKeterangan gambar opsional\rSelanjutnya pengaturan PATH Environment. Pilih yang tengah agar perintah git dapat di kenali di Command Prompt (CMD). Setelah itu klik Next \u0026gt;.\nKeterangan gambar opsional\rSelanjutnya konversi line ending. Biarkan saja seperti ini, kemudian klik Next \u0026gt;.\nKeterangan gambar opsional\rSelanjutnya pemilihan emulator terminal. Pilih saja yang bawah, kemudian klik Next \u0026gt;.\nKeterangan gambar opsional\rSelanjutnya pemilihan opsi ekstra. Klik saja Next \u0026gt;.\nKeterangan gambar opsional\rSelanjutnya pemilihan opsi eksperimental, langsung saja klik Install untuk memulai instalasi.\nKeterangan gambar opsional\rTunggu beberapa saat, instalasi sedang dilakukan.\nKeterangan gambar opsional\rSetelah selesai, kita bisa langsung klik Finish.\nKeterangan gambar opsional\rSelamat, Git sudah terinstal di Windows. Untuk mencobanya, silakan buka CMD atau PowerShell, kemudian ketik perintah git \u0026ndash;version.\nKeterangan gambar opsional\rCara Install Git di MacOS Buat kamu yang menggunakan MacOS, git bisa diinstal dengan brew.\nBuka terminal lalu, ketik perintah berikut untuk menginstal Git:\nbrew install git Tunggulah beberapa saat sampai proses instalasinya selesai. Setelah itu, coba ketik perintah berikut untuk mengecek versi git yang terinstal:\ngit --version Maka hasilnya:\nKeterangan gambar opsional\rIni artinya, git versi 2.42.0 sudah terinstal dengan benar di MacOS. Selanjutnya, kita bisa lakukan konfigurasi awal.\n3. Konfigurasi Awal yang Harus Dilakukan Ada beberapa konfigurasi yang harus dilakukan sebelum mulai menggunakan Git, seperti menentukan name dan email.\nSilakan lakukan konfigurasi dengan perintah berikut ini.\ngit config --global user.name \u0026#34;Petani Kode\u0026#34; git config --global user.email contoh@petanikode.com Kemudian periksa konfigurasinya dengan perintah:\ngit config --list Apabila berhasil tampil seperti gambar berikut ini, berarti konfigurasi berhasil.\nKeterangan gambar opsional\rKonfigurasi core.editor bersifat opsional. Sedangkan name dan email wajib.\nJika kamu memiliki akun Github, Gitlab, Bitbucket atau yang lainnya‚Ä¶\nmaka username dan email harus mengikuti akun tersebut agar mudah diintegrasikan.\nSelain konfigurasi awal ini, kamu juga bisa konfigurasi SSH key untuk Github, Gitlab, dan Bitbucket.\nSilakan baca caranya di sini:\nCara Setup SSH Key untuk Github\nCara Setup SSH Key untuk Gitlab\nCara Setup SSH Key untuk Bitbucket\nKonfigurasi Deafult Branch saat ini Secara default, repository Git akan menggunakan nama branch master ketika kita baru pertama membuat repository.\nNama ini sebenarnya mulai ditinggalkan dan disarankan pakai nama main. Soalnya di Github.. default branch atau branch utama yang digunakan adalah main.\nSaat kita mau upload repo ke Github, nantinya kita akan diminta untuk mengubah master menjadi main.\nBiar tidak repot, kita setup aja dari awal.\nLalu gimana caranya supaya Git otomatis menggunakan main secara default?\nGampang, kita cukup tambahkan konfigurasi ini.\nSilakan ketik di Terminal atau CMD:\ngit config --global init.defaultBranch main Dengan demikian, Git akan otomatis menggunakan nama main sebagai branch utama.\nApa Selanjutnya? Bagus, kita sudah mempersiapkan semuanya. Selanjutnya kita bisa langsung belajar membuat repositori git.\n","permalink":"https://gitkodachi.github.io/tutorial/git/git-install/"},{"title":"Belajar Git #02: Membuat Repositori Baru dalam Proyek","content":"Repositori (repository) dalam bahasa indonesia artinya gudang. Repositori merupakan istilah yang digunakan untuk direktori proyek yang menggunakan Git.\nJika kita memiliki sebuah direktori dengan nama proyek-01 dan di dalamnya sudah menggunakan git, maka kita sudah punya repositori bernama proyek-01.\nMembuat Repository Pembuatan repositori dapat dilakukan dengan perintah git init nama-dir. Contoh:\ngit init proyek-01 Perintah tersebut akan membuat direktori bernama proyek-01. Kalau direktorinya sudah ada, maka Git akan melakukan inisialisasi di dalam direktori tersebut.\nPerintah git init akan membuat sebuah direktori bernama .git di dalam proyek kita. Direktori ini digunakan Git sebagai database untuk menyimpan perubahan yang kita lakukan.\nHati-hati!\nKalau kita menghapus direktori ini, maka semua rekaman atau catatan yang dilakukan oleh Git akan hilang.\nContoh-contoh lain Perintah berikut ini akan membuat repositori pada direktori saat ini (working directory).\ngit init . Tanda titik (.) artinya kita akan membuat repository pada direktori tempat kita berada saat ini.\nKeterangan gambar opsional\rPerintah berikut ini akan membuat repositori pada direktori /var/www/html/proyekweb/.\ngit init /var/www/html/proyekweb .gitignore .gitignore merupakan sebuah file yang berisi daftar nama-nama file dan direktori yang akan diabaikan oleh Git.\nPerubahan apapun yang kita lakukan terhadap file dan direktori yang sudah masuk ke dalam daftar** .gitignore** tidak akan dicatat oleh Git.\nCara menggunakan .gitignore, buat saja sebuah file bernama .gitignore dalam root direktori proyek/repositori.\n/vendor/ /upload/ /cache test.php Pada contoh file .gitignore di atas, saya memasukkan direktori vendor, upload, cache dan file test.php. File dan direktori tersebut akan diabaikan oleh Git.\nPembuatan file .gitignore sebaiknya dilakukan di awal pembuatan repositori.\nContoh .gitignore pada proyek-proyek tertentu, bisa dilihat di repositori ini.\nPenutup Sekian dulu untuk tutorial kedua ini, Kita baru saja mengetahui cara pembuatan repositori dan tentang .gitignore.\nPenggunaan .gitignore memang belum dapat kita rasakan saat ini, karena kita belum membuat revisi apa pun. Karena itu, silakan lanjutkan ke tutorial ketiga ‚ÄòMembuat Revisi‚Äô.\n","permalink":"https://gitkodachi.github.io/tutorial/git/git-init/"},{"title":"Belajar Hugo #2: Setup Proyek Hugo dari Awal","content":"Mebuat Proyek Baru Setup Proyek Hugo\nMembuat Proyek Baru\rCopy\rhugo new site my-hugo-project\rMasuk ke folder proyek cd my-hugo-proyek Inisialisai git repository git init Menambahkan \u0026lsquo;.gitignore\u0026rsquo; /public/ /resources/ /node_modules/ /.DS_Store hugo_stats.json Struktur folder dasar hugo my-hugo-project/ ‚îú‚îÄ‚îÄ archetypes/ ‚îú‚îÄ‚îÄ assets/ ‚îú‚îÄ‚îÄ content/ ‚îú‚îÄ‚îÄ data/ ‚îú‚îÄ‚îÄ layouts/ ‚îú‚îÄ‚îÄ static/ ‚îú‚îÄ‚îÄ themes/ ‚îú‚îÄ‚îÄ config.toml ‚úÖ Proyek Hugo siap digunakan dan sudah terhubung dengan Git!\n","permalink":"https://gitkodachi.github.io/tutorial/hugo/02-setup-proyek-hugo/"},{"title":"Belajar Hugo #3: Menambahkan Tema \u0026 Integrasi Tailwind CSS","content":"Clone Tema Hugo Contoh menggunakan tema ananke:\ngit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke.git themes/ananke atur config.toml:\ntheme = \u0026#34;anake\u0026#34; Install Tailwind CSS via NPM npm init -y npm install -D tailwindcss postcss autoprefixer npx tailwindcss init Buat postcss.config.js diroo: postcss.config.js\rCopy\rmodule.exports = {\rplugins: {\rtailwindcss: {},\rautoprefixer: {},\r}\r}\rInstall Tailwind CSS via NPM postcss.config.js\rCopy\rmodule.exports = {\rcontent: [\r\"./layouts/**/*.{html,js}\",\r\"./content/**/*.{md,html}\",\r],\rdarkMode: \"class\",\rtheme: {\rextend: {},\r},\rplugins: [],\r}\rJalankan Build CSS (Development) npm run dev Jalankan Build CSS (Production) npm run build ‚úÖ Tailwind CSS sekarang terintegrasi dengan Hugo kamu!\n","permalink":"https://gitkodachi.github.io/tutorial/hugo/03-setup-tema-tailwind/"},{"title":"Belajar Git #03: Simpan Perubahan Revisi dengan Git Commit","content":"Pada tutorial Git yang kedua, kita sudah membuat repositori kosong. Belum ada apa-apa di sana.\nSekarang coba tambahkan sebuah file baru.\nSebagai contoh, saya akan menambahkan tiga file HTML kosong.\nKeterangan gambar opsional\rSetelah ditambahkan, coba ketik perintah git status untuk melihat status repositorinya.\nKeterangan gambar opsional\rBerdasarkan keterangan di atas, saat ini kita berada cabang (branch) master dan ada tiga file yang belum ditambahkan ke Git.\nTiga Kelompok Kondisi FIle dalam Git Sebelum kita membuat revisi, kita akan berkenalan dulu dengan tiga kondisi file dalam Git.\n1. Modified Modified adalah kondisi di mana revisi atau perubahan sudah dilakukan, tetapi belum ditandai dan belum disimpan di version control. Contohnya pada gambar di atas, ada tiga file HTML yang dalam kondisi modified.\n2. Staged Staged adalah kondisi di mana revisi sudah ditandai, tetapi belum disimpan di version control. Untuk mengubah kondisi file dari modified ke staged gunakan perintah git add nama_file. Contoh:\ngit add index.html 3. Committed Committed adalah kondisi di mana revisi sudah disimpan di version control. perintah untuk mengubah kondisi file dari staged ke committed adalah git commit.\nMembuat Revisi Pertama Baiklah, sekarang kita akan sudah tahu kondisi-kondisi file dalam Git. Selanjutnya, silakan ubah kondisi tiga file HTML tadi menjadi staged dengan perintah git add.\ngit add index.html git add about.html git add contact.html Atau kita bisa melakukannya seperti ini:\ngit add index.html about.html contact.html atau:\ngit add *.html Atau seperti ini (semua file dan direktori):\ngit add . Setelah itu, cobalah ketik perintah git status lagi. Kondisi filenya sekarang akan menjadi staged.\nKeterangan gambar opsional\rSetelah itu, ubah kondisi file tersebut ke committed agar semua perubahan disimpan oleh Git.\ngit commit -m \u0026#34;Commit pertama\u0026#34; Setelah itu, coba cek dengan perintah git status lagi.\nKeterangan gambar opsional\rSelamat, revisi pertama sudah kita buat. Selanjutnya cobalah untuk membuat revisi kedua.\nMembuat Revisi Kedua Ceritanya ada perubahan yang akan kita lakukan pada file index.html. Silakan modifikasi isi file index.html. Sebagai contoh saya mengisinya seperti ini.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Semua, Saya sedang belajar Git\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Setelah itu ketik lagi perintah git status.\nKeterangan gambar opsional\rTerlihat di sana, file index.html sudah dimodifikasi. Kondisinya sekarang berada dalam modified. Lakukan commit lagi seperti revisi pertama.\ngit add index.html git commit -m \u0026#34;ditambahkan isi\u0026#34; Dengan demikian, revisi kedua sudah disimpan oleh Git. Mungkin anda belum tahu maksud dari argumen -m, argumen tersebut untuk menambahkan pesan setiap menyimpan revisi.\nKeterangan gambar opsional\rSekarang Git sudah mencatat dua revisi yang sudah kita lakukan. Kita bisa ibaratkan revisi-revisi ini sebagai checkpoint pada Game. Apabila nanti ada kesalahan, kita bisa kembali ke checkpoint ini.\nSekian untuk tutorial ke-3 ini, mudah-mudahan bermanfaat.\nSelanjutnya: Tutorial Git 04 - Melihat Log Revisi\n","permalink":"https://gitkodachi.github.io/tutorial/git/git-commit/"},{"title":"Belajar Git #04: Melihat Catatan Log Revisi","content":"Pada tutorial sebelumnya, kita sudah membuat dua revisi pada repositori project-01. Sekarang bagaimana caranya kita melihat catatan log dari revisi-reivisi tersebut?\nGit sudah menyediakan perintah git log untuk melihat catatan log perubahan pada repositori. Contoh penggunaannya:\ngit log Maka kita akan melihat log perubahan apa saja yang sudah dilakukan dalam repositori.\nPada gambar di atas, terdapat dua revisi perubahan yang telah dilakuan.\rLog yang Lebih Pendek Untuk menampilkan log yang lebih pendek, kita bisa menambahkan argumen \u0026ndash;oneline.\ngit log --online Maka akan menghasilkan output:\n06f735a ditambahkan isi cf08ca0 commit pertama Log pada Nomer Revisi/Commit Untuk melihat log pada revisi tertentu, kita bisa memasukan nomer revisi/commit.\ngit log cf08ca0837cf26f1c595be36bb3a6b815e311be1 Maka menghasilkan output:\ncommit cf08ca0837cf26f1c595be36bb3a6b815e311be1 Author: Ardianta Pargo \u0026lt;ardianta_pargo@yahoo.co.id\u0026gt; Date: Mon Feb 13 18:08:56 2017 +0800 commit pertama Log pada File Tertentu Untuk melihat revisi pada file tertentu, kita dapat memasukan nama filenya.\ngit log index.html Maka akan menghasilkan output:\ncommit 06f735af7724558164c87f6b1ce3ca7778eb1c1b Author: Ardianta Pargo \u0026lt;ardianta_pargo@yahoo.co.id\u0026gt; Date: Mon Feb 13 18:26:50 2017 +0800 ditambahkan isi commit cf08ca0837cf26f1c595be36bb3a6b815e311be1 Author: Ardianta Pargo \u0026lt;ardianta_pargo@yahoo.co.id\u0026gt; Date: Mon Feb 13 18:08:56 2017 +0800 commit pertama Karena file index.html sudah direvisi sebanyak dua kali.\nLog Revisi yang dilakukan oleh Author Tertentu Misalkan dalam repositori dikerkajan oleh banyak orang. Maka kita dapat melihat revisi apa saja yang di lakukan oleh orang tertentu dengan perintah berikut:\ngit log --author=\u0026#39;Ocatocat\u0026#39; Penutup Itulah beberapa cara melihat log revisipada repositori, Perintah yang di gunaka adlah git log. Selanjutnya kita pelajari perintah git diff untuk melihat perbandingan pada revisi.\nSelanjutnya: Tutorial Git 05 - Melihat Perbandingan Revisi\n","permalink":"https://gitkodachi.github.io/tutorial/git/git-log/"},{"title":"Belajar Hugo #4: Membuat Layout \u0026 Partial di hugo","content":"Struktur Layout Hugo Hugo menggunakan folder layouts/ dengan struktur seperti ini:\nlayouts/ ‚îú‚îÄ‚îÄ _default/ ‚îÇ ‚îú‚îÄ‚îÄ baseof.html ‚îÇ ‚îú‚îÄ‚îÄ list.html ‚îÇ ‚îî‚îÄ‚îÄ single.html ‚îú‚îÄ‚îÄ partials/ ‚îÇ ‚îú‚îÄ‚îÄ head.html ‚îÇ ‚îú‚îÄ‚îÄ header.html ‚îÇ ‚îú‚îÄ‚îÄ footer.html ‚îÇ ‚îî‚îÄ‚îÄ navbar.html Membuat file \u0026lsquo;baseof.html\u0026rsquo; Contoh Dasar:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;id\u0026#34;\u0026gt; \u0026lt;head\u0026gt; {{ partial \u0026#34;head.html\u0026#34; . }} \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; {{ partial \u0026#34;navbar.html\u0026#34; . }} \u0026lt;main\u0026gt; {{ block \u0026#34;main\u0026#34; . }}{{ end }} \u0026lt;/main\u0026gt; {{ partial \u0026#34;footer.html\u0026#34; . }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Partial: Head (partials/head.html) Contoh Dasar:\n\u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;{{ .Title }} ‚Äî {{ .Site.Title }}\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ \u0026#34;css/styles.css\u0026#34; | relURL }}\u0026#34;\u0026gt; Membuat list.html dan single.html list.html ‚ûî untuk halaman daftar (misal: blog list)\nsingle.html ‚ûî untuk halaman konten tunggal\nContoh single.html:\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;article class=\u0026#34;prose dark:prose-invert mx-auto p-4\u0026#34;\u0026gt; \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} \u0026lt;/article\u0026gt; {{ end }} Partial Navbar (partials/navbar.html) Contoh partials/navbar.html:\n\u0026lt;nav class=\u0026#34;bg-emerald-600 p-4 text-white\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;container mx-auto flex justify-between\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;{{ \u0026#34;/\u0026#34; | relURL }}\u0026#34; class=\u0026#34;font-bold\u0026#34;\u0026gt;{{ .Site.Title }}\u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/nav\u0026gt; ‚úÖ Dengan ini, kamu bisa mulai membangun halaman dengan struktur konsisten! üí° Tips: Gunakan partial untuk komponen yang dipakai berulang.\n","permalink":"https://gitkodachi.github.io/tutorial/hugo/04-membuat-layout-partial/"},{"title":"Belajar Git #05: Melihat Perbandingan Revisi dengan Git Diff","content":"Pada tutorial sebelumnya, kita sudah belajar cara melihat log revisi di repositori. Sekarang kita kan pelajari perintah git diff, fungsinya untuk melihat perbedaan perubahan di revisi.\nMelihat Perbandingan Perubahan yang Dilakukan pada Revisi Gunakan perintah berikut ini untuk melihat perubahan yang dilakukan pada revisi tertentu.\ngit diff cf08ca0837cf26f1c595be36bb3a6b815e311be1 cf08ca0837cf26f1c595be36bb3a6b815e311be1 adalah nomer revisi yang ingin dilihat.\nKeterangan gambar opsional\rLihatlah hasil di atas, simbol plus (+) artinya kode yang ditambahkan. Sedangkan kalau ada kode yang dihapus simbolnya akan menggunakan minus (-).\nContoh: Ditambahkan:\n+ \u0026lt;p\u0026gt;ini kode yang ditambahkan\u0026lt;/p\u0026gt; Dihapus:\n- \u0026lt;i\u0026gt;ini kode yang dihapus\u0026lt;/i\u0026gt; Dimodifikasi/diubah:\n- \u0026lt;span\u0026gt;ini kode sebelum diubah\u0026lt;/span\u0026gt; + \u0026lt;span\u0026gt;ini kode sesudah diubah\u0026lt;/span\u0026gt; Sekarang kita akan mencoba mengubah isi dari index.html.\nSebelum diubah:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Semua, Saya sedang belajar Git\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Setelah diubah:\netelah diubah: \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Setelah itu lakukan jalankan perintah git diff lagi.\nKeterangan gambar opsional\rApa yang dilakukan git diff? Perintah git diff akan membandingkan perubahan yang baru saja dilakukan dengan revisi/commit terakhir.\nMelihat Perbandingan pada File Apa bila kita melakukan banyak perubahan, maka akan banyak sekali tampil output. Karena itu, kita mungkin hanya perlu melihat perubahan untuk file tertentu saja. Untuk melihat perbandingan perubahan pada file tertentu, gunakan perintah berikut.\ngit diff index.html Perintah di atas akan melihat perbedaan perubahan pada file index.html saja.\nMelihat Perbandingan antara Revisi/Commit Perintah untuk membandingkan perubahan pada revisi dengan revisi yang lain adalah sebagai berikut.\ngit diff \u0026lt;nomer commit\u0026gt; \u0026lt;nomer commit\u0026gt; contoh:\ngit diff cf08ca0837cf26f1c595be36bb3a6b815e311be1 06f735af7724558164c87f6b1ce3ca7778eb1c1b Perbandingan Antar Cabang (Branch) Kita memang belum masuk ke materi percabangan di Git. Tapi tidak ada salahnya mengetahui cara melihat perbandingan perubahan antar cabang.\ngit diff \u0026lt;nama cabang\u0026gt; \u0026lt;nama cabang\u0026gt; Penutup Kita sudah pelajari fungsi dari perintah git diff. Perintah ini untuk melihat perbandingan perubahan apa saja yang telah dilakukan pada repositori. Selanjutnya, kita akan belajar membatalkan revisi.\nSelanjutnya: Tutorial Git 06 - Membatalkan Revisi\n","permalink":"https://gitkodachi.github.io/tutorial/git/git-diff/"},{"title":"Belajar Hugo #5: Membuat Komponen \u0026 Interaktifitas Frontend di Hugo","content":"Membuat Komponen Reusable Hugo partial sangat cocok digunakan untuk membuat komponen kecil yang berulang, contohnya Button.\nContoh Komponen Button (partials/components/button.html) \u0026lt;button class=\u0026#34;bg-emerald-600 hover:bg-emerald-700 text-white font-semibold py-2 px-4 rounded transition\u0026#34;\u0026gt; {{ . }} \u0026lt;/button\u0026gt; {{ partial \u0026#34;components/button.html\u0026#34; \u0026#34;Klik Aku\u0026#34; }} {{ . }} Membuat Interaktifitas dengan Alpine.js Alpine.js adalah framework ringan yang cocok untuk interaksi dasar.\nContoh Toggle Button \u0026lt;div x-data=\u0026#34;{ open: false }\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;open = !open\u0026#34; class=\u0026#34;bg-emerald-600 text-white px-4 py-2 rounded\u0026#34;\u0026gt; Toggle \u0026lt;/button\u0026gt; \u0026lt;div x-show=\u0026#34;open\u0026#34; class=\u0026#34;mt-2 p-4 bg-emerald-100 rounded\u0026#34;\u0026gt; Konten ini bisa muncul \u0026amp; hilang! \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Menambahkan Alpine.js di Layout Tambahkan di bagian bawah baseof.html sebelum :\n\u0026lt;script src=\u0026#34;//unpkg.com/alpinejs\u0026#34; defer\u0026gt;\u0026lt;/script\u0026gt; Contoh Komponen Modal dengan Alpine.js + Hugo \u0026lt;div x-data=\u0026#34;{ open: false }\u0026#34;\u0026gt; \u0026lt;button @click=\u0026#34;open = true\u0026#34; class=\u0026#34;bg-emerald-500 text-white px-4 py-2 rounded\u0026#34;\u0026gt;Buka Modal\u0026lt;/button\u0026gt; \u0026lt;div x-show=\u0026#34;open\u0026#34; class=\u0026#34;fixed inset-0 bg-black/50 flex items-center justify-center\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;bg-white p-4 rounded\u0026#34;\u0026gt; \u0026lt;p\u0026gt;Ini Modal!\u0026lt;/p\u0026gt; \u0026lt;button @click=\u0026#34;open = false\u0026#34; class=\u0026#34;mt-2 text-red-500\u0026#34;\u0026gt;Tutup\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Catatan ‚úÖ Hugo Partial ‚ûî untuk UI komponen berulang ‚úÖ Alpine.js ‚ûî untuk behavior interaktif dasar ‚úÖ Tailwind CSS ‚ûî untuk styling cepat\nNote: üéØ Dengan gabungan Hugo + Alpine.js + Tailwind, kamu bisa membuat website yang cepat, dinamis, dan ringan.\n","permalink":"https://gitkodachi.github.io/tutorial/hugo/05-komponen-dan-interaktifitas/"},{"title":"Belajar Git #06: Perintah Untuk Membatalkan Revisi","content":"Pada tutorial git 05, kita sudah belajar cara melihat perbedaan di setiap revisi. Sekarang kita akan belajar, cara membatalkan sebuah revisi.\nTerkadang pada perubahan yang kita lakukan terjadi kesalahan dan kita ingin mengembalikannya seperti keadaan sebelumnya. Maka kita perlu menyuruh git untuk mengembalikannya. Ada beberapa perintah yang digunakan di antaranya: git checkout, git reset, dan git revert.\nMembatalkan Perubahan Jika revisi kita belum staged ataupun mengetahui, kita bisa mengembalikannya menggunakan perintah git checkout nama_file.html.\nContoh: Misalkan kita akan mengubah isi dari file index.html pada repositori project-01.\nSebelum diubah:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Setelah Diubah:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Hello Dunia!, Saya sudah belajar Git\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Belajar git ternyata cukup menyenangkan\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Hasil git diff:\n$ git diff diff --git a/index.html b/index.html index c5082e6..115efcb 100644 --- a/index.html +++ b/index.html @@ -5,6 +5,7 @@ \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; - \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Hello Dunia!, Saya sudah belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Belajar git ternyata cukup menyenangkan\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Sekarang kita akan membatalkan perubahan tersebut. Karena kita belum melakukan stage dan commit, maka kita bisa menggunakan perintah:\ngit checkout index.html Perubahan yang baru saja kita lakukan akan dibatalkan. Kalau tidak percaya, coba saja periksa file yang sudah diubah tadi atau cek dengan perintah git status.\n$ git status On branch master nothing to commit, working directory clean Membatalkan Perubahan File yang Sudah dalam Kondisi staged Kondisi staged merupakan kondisi file yang sudah di add (git add), namun belum disimpan (git commit) ke dalam Git.\nSebagai contoh, kita lakukan perubahan lagi di file index.html seperti pada contoh sebelumnya.\n$ git diff diff --git a/index.html b/index.html index c5082e6..c99aa5b 100644 --- a/index.html +++ b/index.html @@ -5,6 +5,7 @@ \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; - \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Hello Dunia!, Saya sudah belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Belajar git ternyata gampang-gampang susah\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Setelah itu, kita ubah kondisi file menjadi staged dengan perintah:\ngit add index.html Cek statusnya dulu:\n$ git status On branch master Changes to be mengetahui: (use \u0026#34;git reset HEAD \u0026lt;file\u0026gt;...\u0026#34; to unstage) modified: index.html Nah, file index.html sudah masuk ke dalam kondisi staged. Untuk mengubahnya menjadi kondisi modified, kita bisa menggunakan perintah git reset.\ngit reset index.html Cek statusnya lagi:\n$ git status On branch master Changes not staged for commit: (use \u0026#34;git add \u0026lt;file\u0026gt;...\u0026#34; to update what will be mengetahui) (use \u0026#34;git checkout -- \u0026lt;file\u0026gt;...\u0026#34; to discard changes in working directory) modified: index.html no changes added to commit (use \u0026#34;git add\u0026#34; and/or \u0026#34;git commit -a\u0026#34;) Sekarang file index.html sudah dalam kondisi modified, kita bisa membatalkan perubahannya dengan perintah git checkout seperti contoh sebelumnya.\ngit checkout index.html Maka perubahan yang kita lakukan akan dibatalkan, üòÑ.\nKeterangan gambar opsional\rMembatalkan Perubahan File yang Sudah dalam Kondisi Committed Sekarang bagaimana kalau filenya sudah dalam kondisi mengetahui dan kita ingin mengembalikannya? Untuk melakukan ini, kita harus mengetahui nomer commit, kemudian mengembalikan perubahannya seperti pada nomer commit tersebut.\nMisalkan, kita ubah kembali file index.html.\n$ git diff diff --git a/index.html b/index.html index c5082e6..3c150a8 100644 --- a/index.html +++ b/index.html @@ -5,6 +5,7 @@ \u0026lt;title\u0026gt;Belajar Git - Project 01\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; - \u0026lt;p\u0026gt;Hello Dunia!, Saya sedang belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Hello Dunia!, Saya sudah belajar Git\u0026lt;/p\u0026gt; + \u0026lt;p\u0026gt;Belajar Git Greget!\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Kemudian kita melakukan commit.\ngit add index.html git commit -m \u0026#34;belajar git greget!\u0026#34; Sekarang kita akan melihat nomer commit dengan perintah git log.\nKeterangan gambar opsional\rKita akan mengembalikan kondisi file index.html, seperti pada commit sebelumnya. Maka kita bisa menggunakan perintah:\ngit checkout b05f7d05c9298f2cd11b870369f3cf4b2350eca7 index.html Seperti mesin waktu, kita sudah mengembalikan keadaan file index.html seperti keadaan saat commit tersebut. Namun, saat ini kondisi index.html dalam keadaan staged. Kita bisa kembalikan ke dalam kondisi modified dengan perintah git reset.\ngit reset index.html Pada contoh tersebut, kita sudah berhasil mengembalikan file index.html ke dalam keadaan seperti commit sebelumnya.\nApabila kita ingin mengembalikan seluruh file dalam commit, kita cukup melakukan checkout ke nomer commit saja, tanpa diikuti nama file. Contoh:\ngit checkout ac6d798f98bac5fad693ef8159f957c5b0805c23 Catatan\rPerintah ini akan mengembalikan semua file dalam kondisi pada nomer commit yang diberikan, namun bersifat temporer. Kembali ke 3 Commit Sebelumnya Untuk kembali ke 3 commit sebelumnya, kita bisa menggunakan perintah berikut.\ngit checkout HEAD~3 index.html Mebatalkan Semua Perubahan yang ada Jika kita ingin mengembalikan semua file ke suatu commit, kita bisa melakukannya dengan perintah:\ngit revert -n \u0026lt;nomer commit\u0026gt; contoh:\ngit revert -n 2400ba0e258bd6a144caa273012b130d6baa5e42 Akhir Kata OK, sekian dulu tutorial ke-6 ini. Rasanya agak kepanjangan. Terima kasih sudah membaca. Sampai jumpa di tutorial ke-7.\n","permalink":"https://gitkodachi.github.io/tutorial/git/git-revert/"},{"title":"Belajar Git #07: Menggunakan Percabangan untuk mencegah Konflik","content":"Bayangkan anda sedang bekerja dengan tim pada suatu repositori Git. Repositori ini dikerjakan secara bersama-sama.\nKadang‚Ä¶ akan terjadi konflik, karena kode yang kita tulis berbeda dengan yang lain.\nMisalnya, Si A menulis kode untuk fitur X dengan algoritma yang ia ketahui. Sedangkan si B menulis dengan algoritma yang berbeda.\nLalu mereka melakukan commit, dan kode sumber jadi berantakan. Anggota tim yang lain menjadi pusing.\nGambar contoh dengan zoom\rAgar tidak terjadi hal yang seperti ini, kita harus membuat cabang (branch) tersendiri.\nMisalnya, si A akan mengerjakan fitur X, maka dia harus membuat cabang sendiri. Si A akan bebas melakukan apapun di cabangnya tanpa mengganggu cabang utama (master).\nCara Membuat Cabang Baru Perintah untuk membuat cabang adalah git branch, kemudian diikuti dengan nama cabangnya.\nContoh:\ngit branch fitur_register Maka Git akanmembuat cabang bernama fitur_register.\nGambar contoh dengan zoom\rSekarang setiap orang memiliki cabangnya masing-masing. Mereka bebas bereksperimen.\nUntuk melihat cabang apa saja yang ada di repositori, gunakan perintah git branch.\nContoh:\n$ git branch halaman_login * master Tanda bintang (*) artinya cabang yang sedang aktif atau Kita sedang berada di sana.\nLatihan Untuk memantapkan pemahaman tentang percabangan Git, mari kita coba praktik.\nPada repositori, buatlah sebuah cabang baru.\ngit branch halama_login Setelah itu, pindah ke cabang yang baru saja kita buat dengan perintah:\ngit checkout halaman_login Lalu tambahkan file login.html, isinya terserah anda.\nGambar contoh dengan zoom\rCatatan\r\u0026ldquo;Jangan lupa untuk menggunakan perintah git status untuk melihat status repositori.\u0026rdquo;\rKita sudah menambahkan file login.html. Selanjutnya kita lakukan commit.\ngit add login.html git commit -m \u0026#34;membuat file login.html\u0026#34; Bagus! revisi kita pada cabang halaman_login sudah disimpan. Sekarang coba kembali ke cabang master.\ngit checkout master Apakah anda menemukan file login.html?\nPasti tidak!\nSekarang kembali lagi ke cabang halaman_login.\ngit checkout halaman_login Cek lagi, apakah sekarang file login.html sudah ada?\nproject-01/ ‚îú‚îÄ‚îÄ index.html ‚îî‚îÄ‚îÄ login.html Ternyata ada. Yep! kita bisa mengambil kesimpulan, kalau perubahan pada cabang halaman_login tidak akan berpengaruh di cabang master.\nMenggunakan Cabang Anggaplah kita sudah selesai membuat fitur login di cabang halaman_login. Sekarang kita ingin Menggabungkannya dengan cabang master (utama).\nPertama, kita harus pindah dulu ke cabang master.\ngit checkout master Setelah itu, barulah kita bisa menggabungkan dengan perintah git merge.\ngit merge halaman_login Sekarang lihat, file login.html sudah ada di cabang master.\nGambar contoh dengan zoom\rMengenai Bentrok Bentrok biasanya terjadi jika ada dua orang yang mengedit file yang sama.\nKenapa bisa begitu, ‚Äòkan mereka sudah punya cabang masing-masing?\nBisa jadi, di cabang yang mereka kerjakan ada file yang sama dengan cabang lain. Kemudian, saat digabungkan terjadi bentrok.\nMengatasi bentrok adalah tugas dari pemilik atau pengelola repositori. Dia harus bertindak adil, kode mana yang harus diambil.\nBiasanya akan ada proses diskusi dulu dalam mengambil keputusan.\nBaiklah, sekarang kita akan coba membuat bentrokan üòÑ.\nPindah dulu ke branch halaman_login‚Ä¶\ngit checkout halaman_login Setela itu, edit file login.html atau index.html, karena kedua file tersebut ada di kedua cabang yang akan kita gabungkan.\n$ git diff diff --git a/login.html b/login.html index 23a3f5c..eea5658 100644 --- a/login.html +++ b/login.html @@ -1 +1 @@ -di sini berisi kode untuk halaman login +\u0026lt;p\u0026gt;di sini berisi kode untuk halaman login\u0026lt;p\u0026gt; Setelah itu, lakukan commit lagi:\ngit add login.html git commit -m \u0026#34;ubah isi login.html\u0026#34; Selanjutnya pindah ke cabang master dan lakukan perubahan juga di cabang ini. Ubah file yang sama seperti di cabang halaman_login.\nSetelah itu, lakukan commit di cabang master\ngit add login.html git commit -m \u0026#34;ubah isi login.html di cabang master\u0026#34; Terakhir, coba gabungkan cabang halaman_login dengan cabang master, maka akan terjadi bentrok.\n$ git merge halaman_login Auto-merging login.html CONFLICT (content): Merge conflict in login.html Automatic merge failed; fix conflicts and then commit the result. Nah, kita disuruh perbaiki kode yang bentrok. Sekarang buka login.html dengan teks editor.\nGambar contoh dengan zoom\rKedua kode cabang dipisahkan dengan tanda ======. Sekarang.. tugas kita adalah memperbaikinya.\nSilakan eliminasi salah satu dari kode tersebut.\nGambar contoh dengan zoom\rSetelah itu lakukan commit untuk menyimpan perubahan ini.\ngit add login.html git commit -m \u0026#34;perbaiki konflik\u0026#34; Bagus! bentrokan antar ormas programmer sudah beres üòÑ.\nMenghapus Cabang Cabang yang sudah mati atau tidak ada pengembangan lagi, sebaiknya dihapus.\nAgar repositori kita bersih dan rapi.\nCara menghapus cabang, gunakan perintah git branch dengan argumen -d dan diikuti dengan nama cabangnya.\nContoh:\ngit branch -d halaman_login Akhir Kata‚Ä¶ Sekian tutorial ini. Semoga ada manfaatnya.\nSumber: PetaniKode\r","permalink":"https://gitkodachi.github.io/tutorial/git/git-branch/"},{"title":"Belajar Git #08: Perbedaan Git checkout, Git Reset, dan Git Revert","content":"Pada tutorial ke-6, kita sudah membahas cara membatalkan revisi menggunakan perintah git checkout, git reset, dan git revert.\nSekilas, tiga perintah tersebut melakukan hal yang sama. Akan tetapi ada perbedaannya.\nApa itu?\nMari kita bahas‚Ä¶\nGit Checkout Perintah git checkout seperti mesin waktu, kita bisa kembalikan kondisi file proyek seperti waktu yang dituju.\nMisalnya:\ngit checkout 06f735af7724558164c87f6b1ce3ca7778eb1c1b Maka semua file akan dikembalikan seperti keadaan pada nomer commit tersebut.\nKeterangan gambar opsional\rAkan tetapi, ini bersifat temporer (sementara). Pengembalian ini tidak disimpan dalam database Git.\nTips\r\u0026ldquo;Untuk kembali dari masa lalu gunakan perintah: git checkout master\u0026rdquo; Selain itu juga, perintah ini digunakan untuk berpindah dan membuat cabang. Ini bisa kita gunakan untuk membuat perubahan baru berdasarkan kode di masa lalu.\nContoh:\nMisalnya kita ingin membuat cabang baru berdasarkan kondisi kode di masa lalu, maka kita bisa menggunakan perintah:\ngit checkout -b nama_cabang \u0026lt;nomer_commit\u0026gt; Maka nanti cabang baru akan terbentuk dari commit sebelumnya.\nKeterangan gambar opsional\rCara ini bisa kita ibaratkan seperti menulis cerita baru dengan plot yang berbeda.\nGit Reset Perintah git reset sering disebut sebagai perintah berbahaya yang dapat menghancurkan catatan sejarah perubahan.\nHati-hati! Perintah ini membuat kita tidak bisa kembali lagi ke masa depan. Mau tidak mau, kita harus menulis ulang sejarah.\nKeterangan gambar opsional\rPerintah ini memiliki tiga argumen atau opsi utama, yaitu \u0026ndash;soft, \u0026ndash;mixed, dan \u0026ndash;hard.\n\u0026ndash;soft akan mengembalikan dengan kondisi file dalam keadaan staged. \u0026ndash;mixed akan mengembalikan dengan kondisi file dalam keadaan modified. \u0026ndash;hard akan mengembalikan dengan kondisi file dalam keadaan committed. Contoh penggunaan:\ngit reset --soft 06f735af7724558164c87f6b1ce3ca7778eb1c1b Maka kita akan dikebalikan dengan file dalam keadaan staged.\nKeterangan gambar opsional\rCoba periksa catatan perubahan dengan perintah git log, pasti ada yang hilang dan kita tidak akan bisa kembali lagi ke masa depan. Ini seperti melakukan Re:Zero üòÑ.\nHati-hati\r\u0026ldquo;Jangan lakukan git reset pada repositori yang sudah di bagikan ke publik, karena dapat merusaknya.\u0026rdquo; Git Revert Revert artinya mengembalikan. Perintah ini lebih aman daripada git reset, karena tidak akan menghapus catatan sejarah revisi.\nRevert akan akan mengambil kondisi file yang ada di masa lalu, kemudian menggabungkannya dengan commit terakhir.\nKeterangan gambar opsional\rMasih belum paham?\nMari kita coba lakukan sedikit eksperimen‚Ä¶\nSebelumnya, berikut ini adalah kondisi repositori yang dijadikan bahan percobaan.\nKeterangan gambar opsional\rAda empat commit di sana, kemudian kita ingin melakukan revert ke commit ke-2.\nKeterangan gambar opsional\rTerjadi error, karena ada file yang bentrok.\nKeterangan gambar opsional\rSilakan atasi konflik ini, setelah itu lakukan commit.\nKeterangan gambar opsional\rNah, sekarang kita sudah punya lima catatan revisi/commit di dalam repositori.\nKesimpulan Perintah git checkout mengembalikan file dalam kondisi sebelumnya, tapi bersifat sementara. Perintah git reset, akan mengembalikan file ke kondisi sebelumnya, kemudian menghapus catatan sejarah commit berikutnya. Perintah git revert mengembalikan file dengan tidak menghapus sejarah commit. Kira-kira seperti itulah perbedaan perintah git checkout, git reset, dan git revert.\nReferensi:\nhttp://stackoverflow.com/a/4114122 https://www.atlassian.com/git/tutorials/undoing-changes ","permalink":"https://gitkodachi.github.io/tutorial/git/git-checkout-reset-revert/"},{"title":"Belajar Git #09: Berkerja Dengan Remote Repository","content":"Pada proyek pengembangan software yang melibatkan banyak orang (tim), kita tidak hanya akan menyimpan sendiri repository proyeknya.\nSemua tim yang terlibat dalam pengkodean (coding) akan menyimpan repository lokal di komputernya masing-masing.\nSetelah itu, akan dilakukan penggabungan ke repository inti atau remote.\nBiasanya akan ada repository pusat atau untuk menyimpan source code yang sudah digabungkan (merge) dari beberapa orang.\nGambar contoh dengan zoom\rDi mana nyimpan repository remote-nya?\nBisa di server kantor atau bisa juga menggunakan layanan seperti Github, Gitlab, Bitbucket, dll.\nGithub adalah layanan yang paling populer untuk menyimpan (hosting) repository secara remote. Banyak proyek open source tersimpan di sana.\nKita akan menggunakan Github pada tutorial ini, pastikan kamu sudah memiliki akun Github.\nMebuat Repository di Github Silakan buka Github, kemudian buat sebuah repository dengan nama belajar-git seperti berikut ini.\nGambar contoh dengan zoom\rMaka sekarang kita punya repository kosong di Github.\nGambar contoh dengan zoom\rJangan diapa-apakan dulu.\nSilakan buka kembali repository lokal yang pernah kita buat, yaitu project-01.\nKita akan upload ke Github.\nMenambahkan dan Menghapus Remote Sebelum kita bisa upload semua revisi yang ada di repository lokal, kita harus menambahkan remote-nya terlebih dahulu.\n*Remote*\r\u0026ldquo;Remote dapat kita tambahkan dengan perintah seperti ini:\u0026rdquo;\rflowchart TD\rA[Remote Control] --\u003e|Sinyal Infrared| B(Receiver)\rB --\u003e C{Decoder}\rC --\u003e|Perintah ON/OFF| D[Power Control]\rC --\u003e|Perintah Volume| E[Volume Control]\rC --\u003e|Perintah Channel| F[Channel Selector]\rD --\u003e G[Device]\rE --\u003e G\rF --\u003e G\rAda dua pilihan URL remote yang bisa kita berikan:\nMelalui HTTPS:\nhttps://github.com/octocat/belajar-git.git dan memelalui SSH:\ngit@github.com:octocat/belajar-git.git Apa bedanya?\nKalau kita menggunakan HTTPS, maka kita akan diminta password setiap kali melakukan push.\nSedangkan yang menggunakan SSH, kita tidak akan diminta password. Namun, kita harus melakukan konfigurasi SSH Key terlebih dahulu.\nSaya lebih suka yang menggunakan SSH.\nMaka perintah untuk menambahkan remotenya akan menjadi seperti ini:\ngit remote add github git@github.com:octocat/belajar-git.git Setelah itu, silakan ketik perintah git remote -v untuk melihat remote apa saja yang sudah ditambahkan.\nGambar contoh dengan zoom\rBagus, sekarang kita sudah menambahkan remote di dalam repository lokal.\nSelanjutnya kita bisa melakukan push atau mengirim revisi ke repository remote (Github).\nNah untuk menghapus dan mengubah nama remote dapat dilakukan dengan perintah berikut:\nUbah nama remote:\ngit remote rename github kantor Keterangan:\ngithub adalah nama lama kantor adalah nama baru Hapus remote:\ngit remote remove github keterangan:\ngithub adalah nama remote yang akan dihapus. Mengirim Revisi ke Remote Repository Perintah yang kita gunakan untuk mengirim revisi ke repository remote adalah git push.\ngit push github master Keterangan:\ngithub adalah nama remote. master adalah nama cabang tujuan. Mari kita coba‚Ä¶\nPastikan repository lokal kita sudah memiliki remote.\nGambar contoh dengan zoom\rSetelah itu lakukan beberapa revisi atau commit.\ngit add . git commit -m \u0026#34;menambahkan beberapa revisi\u0026#34; Sebagai contoh, saya memiliki 5 catatan revisi.\nGambar contoh dengan zoom\rMaka tinggal kita kirim saja dengan perintah git push github master.\nJika muncul seperti ini, artinya push sukses dilakukan.\nGambar contoh dengan zoom\rSekarang lihat ke Github, pasti semuanya sudah ter-upload ke sana.\nGambar contoh dengan zoom\rMudah bukan?\nBiar mantap, coba buat revisi lagi di file index.html.\nMisalnya perubahannya seperti ini:\nGambar contoh dengan zoom\rLalu lakukan commit dan push.\ngit add index.html git commit -m \u0026#34;mengubah judul dan teks di body\u0026#34; git push github master Jika berhasil, maka akan tampil seperti ini.\nGambar contoh dengan zoom\rPeriksa kembali repository di Github dan perhatikanlah perubahannya.\nGambar contoh dengan zoom\rJika kita klik commit terakhir, maka kita akan dibawa ke git diff-nya Github.\nDi sana kita bisa melihat perubahan apa saya yang dilakukan pada commit tersebut.\nGambar contoh dengan zoom\rMengambil Revisi dari Remote Repository Saat kita bekerja dengan repository yang memiliki banyak kontributor, kita seharusnya mengambil dulu revisi terbaru dari repository inti agar tidak bentrok.\nMisalnya begini.\nPada repository remote ada kontributor lain yang sudah menambahkan dan mengubah sesuatu di sana.\nGambar contoh dengan zoom\rMaka kita harus mengambil perubahan tersebut, agar repository lokal kita tetap ter-update atau sama persis seperti repository remote.\nAda dua perintah untuk mengambil revisi dari repository remote:\ngit fetch [nama remote] [nama cabang] git pull [nama remote] [nama cabang] Apa perbedaannya?\nPerintah git fetch hanya akan mengambil revisi (commit) saja dan tidak langsung melakukan penggabungan (merge) terhadap repository lokal.\nSedangkan git pull akan mengambil revisi (commit) dan langsung melakukan penggabungan (merge) terhadap repository lokal.\nTerus kita harus pakai yang mana?\nTergantung dari situasi dan kondisi.\nBila kita sudah membuat perubahan di repository lokal, maka sebaiknya menggunakan git fetch agar perubahan yang kita lakukan tidak hilang.\nNamun, bila kita tidak pernah melakukan perubahan apapun dan ingin mengambil versi terakhir dari repository remote, maka gunakanlah git pull.\nMengambil Revisi dengan git fetch Baiklah, sekarang mari kita coba praktikkan.\nSilakan buka github, dan tambahkan file README.md melalui Github.\nKlik tombol add README.\nGambar contoh dengan zoom\rSetelah itu, isilah file RAEDME.md dengan apapun yang kamu inginkan.\nSebagai contoh, saya mengisinya seperti ini:\nGambar contoh dengan zoom\rSetelah selesai, simpan perubahan dengan melakukan commit langsung dari Github.\nGambar contoh dengan zoom\rPesan commit bersifat opsional, boleh di isi boleh tidak. Karena Github akan membuatkannya secara otomatis.\nSekarang ada perubahan baru di repository remote dan kita akan mengambil perubahan tersebut.\nMari kita lakukan dengan perintah git fetch.\nGambar contoh dengan zoom\rRevisi sudah diambil, tapi belum ada file README.md di dalam repository lokal.\nKenapa bisa begitu?\nYa, balik lagi dari pengertian git fetch. Dia hanya bertugas mengambil revisi saja dan tidak langsung menggabungkannya dengan repository lokal.\nCoba kita cek dengan git log.\nGambar contoh dengan zoom\rPada gambar di atas terlihat perbedaan log antara repository lokal dengan repository remote.\nBila ingin mengecek apa saja perbedaannya, coba gunakan perintah git diff.\ngit diff master github/master Keterangan:\nmaster adalah cabang master di repository lokal. github/master adalah cabang master di repository remote. Hasil outputnya kira-kira akan seperti ini:\ndiff --git a/README.md b/README.md new file mode 100644 index 0000000..1174eb2 --- /dev/null +++ b/README.md @@ -0,0 +1,18 @@ +# belajar-git + +Repository ini adalah repository untuk belajar Git. Silakan baca materi tentang [git remote di Petani Kode](https://www.petanikode.com/git-remote). + +Atau mulai belajar Git dari awal: + +- [Tutorial Git 01 - Instalasi Git dan Persiapan Awal](https://www.petanikode.com/git-install/) +- [Tutorial Git 02 - Membuat Repositori Git](https://www.petanikode.com/git-init/) +- [Tutorial Git 03 - Membuat Revisi](https://www.petanikode.com/git-commit/) +- [Tutorial Git 04 - Melihat Catatan Log Revisi Git](https://www.petanikode.com/git-log/) +- [Tutorial Git 05 - Melihat Perbandingan Revisi Git](https://www.petanikode.com/git-diff/) +- [Tutorial Git 06 - Membatalkan Revisi Git](https://www.petanikode.com/git-membatalkan-revisi/) +- [Tutorial Git 07 - Percabangan](https://www.petanikode.com/git-branch/) +- [Tutorial Git 08 - Perbedaan Git Checkout, Git Reset, dan Git Revert](https://www.petanikode.com/git-checkout-reset-revert/) +- Tutorial Git 09 - Menulis Ulang Sejarah +- [Tutorial Git 10 - Bekerja dengan Remote Repositori](https://www.petanikode.com/git-remote/) +- Tutorial Git 11 - Git Tag +- ... Lalu sekarang bagaimana cara kita menggabungkan commit dari repository remote dengan lokal?\nGunakan perintah git merge.\ngit merge master github/master Setelah itu coba ketik ls dan git log lagi‚Ä¶\nGambar contoh dengan zoom\rKita sudah berhasil menggabungkan revisi dari remote dan lokal. üéâ\nMengambil Revisi dengan git pull Lakukan hal yang sama seperti tadi.\nKali ini kita akan membuat file baru bernama register.html melalui Github.\nGambar contoh dengan zoom\rBerikan nama file dengan register.html dan isi dengan apa saja.\nGambar contoh dengan zoom\rSimpan revisi dan tambahkan pesan commit seperti ini.\nGambar contoh dengan zoom\rSekarang ada perubahan baru di repository remote dan kita akan mengambilnya dengan perintah git pull.\nSilakan buka repository lokal dan ketik perintah berikut:\ngit pull github master Maka semua revisi akan diambil dan langsung digabungkan (merge).\nGambar contoh dengan zoom\rClone Remote Repository Clone repository bisa kita bilang seperti copy repository dari remote ke lokal.\nPerintah untuk melakukan clone adalah git clone.\ngit clone https://github.com/octocat/belajar-git.git [nama dir] Keterangan:\nhttps://\u0026hellip; adalah URL repository remote, kita juga bisa menggunakan SSH. [nama dir] (opsional) adalah nama direktori yang akan dibuat. Jika kita tidak berikan nama direktori, maka akan otomatis menggunakan nama repository. Mari kita coba‚Ä¶\nSekarang saya akan pindah ke Desktop.\ncd ~/Desktop Setelah itu melakukan clone di sana.\ngit clone git@github.com:octocat/belajar-git.git Maka akan ada direktori baru di sana.\nGambar contoh dengan zoom\rFYI\rSaat kalian clone sebuah repository dari Github, nama remote origin akan diberikan secara otomatis Gambar contoh dengan zoom\rApa Selanjutnya? Kita sudah belajar beberapa perintah untuk bekerja pada remote repository, di antaranya git remote, git fetch, git pull, git clone, dll.\nSemua perintah itu kita perlukan saat berkolaborasi dengan tim di proyek open source maupun closed source.\nApa selanjutnya?\nSelanjutnya silakan banyak-banyak latihan dan sering-sering menggunakannya tiap hari agar terbiasa.\nTerima kasih sudah mengikuti tutorial ini sampai akhir. Kalau ada saran dan pertanyaan, jangan sungkan-sungkan untuk berkomentar.\n","permalink":"https://gitkodachi.github.io/tutorial/git/git-remote/"},{"title":"Belajar Git #10: Menggunakan Git Pull Git Fetch","content":"","permalink":"https://gitkodachi.github.io/tutorial/git/git-full-fetch/"},{"title":"Belajar Git #12: Cara Menggunakan Git Pada Visual Studio Code","content":"","permalink":"https://gitkodachi.github.io/tutorial/git/git-vscode/"},{"title":"Belajar Hugo #6: Workflow Deployment Hugo dengan GitHub Actions","content":"Apa itu Workflow? Workflow di GitHub Actions adalah alur otomatis yang berjalan saat ada event tertentu, misalnya:\nPush ke branch main Pull Request dibuka Manual dispatch Contoh Basic Workflow untuk Hugo + Tailwind CSS Buat file di .github/workflows/deploy.yml:\nname: Build and Deploy Hugo Site on: push: branches: [\u0026#34;main\u0026#34;] workflow_dispatch: permissions: contents: read pages: write id-token: write jobs: build: runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#39;0.147.9\u0026#39; extended: true - name: Setup Node.js uses: actions/setup-node@v4 with: node-version: \u0026#39;20\u0026#39; - name: Install Dependencies run: npm ci - name: Build Tailwind + Hugo run: hugo --minify - name: Upload Pages Artifact uses: actions/upload-pages-artifact@v3 with: path: ./public deploy: runs-on: ubuntu-latest needs: build environment: name: github-pages url: ${{ steps.deployment.outputs.page_url }} steps: - name: Deploy to GitHub Pages uses: actions/deploy-pages@v4 File yang Perlu Ada package.json ‚ûî Tailwind + PostCSS setup config.toml ‚ûî BaseURL sesuai GitHub Pages public/ ‚ûî Hasil build Hugo .github/workflows/deploy.yml ‚ûî Workflow CI/CD Best Practice ‚úÖ Simpan workflow di branch main ‚úÖ Cek hasil build di tab Actions ‚úÖ Gunakan hugo \u0026ndash;minify untuk versi production ‚úÖ Pastikan URL di config.toml sudah benar Deployment Otomatis: ‚úÖ Push ke main ‚ûî GitHub Actions jalan otomatis ‚úÖ Website langsung live di GitHub Pages Info: üöÄ Dengan workflow ini, kamu tidak perlu deploy manual lagi. Cukup commit dan push ‚Äî Hugo + Tailwind langsung build \u0026amp; deploy otomatis!\nNext Step: Note: üî• Mau lanjut ke Branching \u0026amp; Pull Request Workflow?\n","permalink":"https://gitkodachi.github.io/tutorial/hugo/workflow-deployment-github-actions/"},{"title":"Cara Setup SSH Key untuk Github agar Bisa Ngepush Tanpa Password","content":"Kita bisa melakukan push ke Github melalui dua metode yakni, melalui protokol HTTPS dan SSH.\nJika kita menggunakan HTTPS, maka kita akan dimintai password di setiap kali melakukan push. Sedangkan kalau pakai SSH, ini tidak perlu..\n..karena password-nya akan diwakili oleh SSH Key.\nPada tutorial ini, kita akan belajar gimana cara setup SSH Key untuk Github. Sehingga nanti bisa melakukan push tanpa harus ngetik password terus menerus.\nMari kita mulai!\nApa itu SSH Key? SSH Key adalah Key yang dipakai untuk berkomunikasi dengan server melalui protokol SSH. SSH Key terdiri dari publik key dan private key.\nPublik key akan kita taruh ke server dalam hal ini adalah Github, kemudian private key akan kita simpan di lokal.\nPrivate key sebenarnya mewakili password, sehingga kamu tidak boleh sembarangan membagikannya.\nIntinya, private key dan publik key akan dicocokan secara otomatis saat kita terhubung dengan SSH.\n1. Cara Membuat SSH Key Kita bisa membuat SSH Key dengan perintaih ssh-keygen, ini bisa kamu ketik di Terminal dan Git Bash.\nSilakan buka Terminal, kemudian ketik perintah berikut untuk membuat SSH Key:\ncd ~/.ssh/ #pindah ke direktori ssh # membuat private key dan public key ssh-keygen -t rsa Pada perintah ini, kita masuk dulu ke folder .ssh yang ada di Home, kemudian kita generate SSH Key dengan ssh-keygen.\nBerikutnya, kita akan diminta mengisi id dan passpharse.\nGambar contoh dengan zoom\rPada contoh di atas, saya mengisi id dengan dian dan passpharse tidak diisi. Langsung saja tekan Enter saat pengisian passpharse.\nJika kamu mengisi passpharse, maka akan diminta mengisinya lagi saat melakukan push melalui SSH.\nSetelah selesai‚Ä¶ akan ada dua file baru di dalam direktori ~/.ssh/.\nGambar contoh dengan zoom\rPrivate Key berisi kunci rahasia yang tidak boleh diketahui siapapun dan Public Key berisi kunci publik yang akan kita taruh di Bitbucket.\n2. Tambahkan SSH Key ke Github Sebelumnya ambil dulu kunci publik yang sudah anda buat, gunakan perintah cat.\ncat ~/.ssh/id_anda.pub Copy semua teks yang ditampilkan. Gambar contoh dengan zoom\rLalu masuk ke Settings\u0026gt;SSH and GPG Keys, tambahkan SSH Key baru dengan mengelik New SSH Key.\nSetelah itu masukkan atau paste public key yang kamu copy tadi.\nGambar contoh dengan zoom\rJangan lupa juga untuk kasi Title seperti nama komputermu biar gampang diingat, jika nanti kamu menambahkan banyak SSH Key.\n3. Uji Coba SSH Key Karena kita baru pertama kali buat SSH Key, kita harus tambahkan dulu identitas kita.\nCaranya ketik perintah berikut:\nssh-add dian Silakan ganti dian dengan id dari SSH key yang kamu buat tadi. Jika berhasil, maka akan muncul seperti ini:\nGambar contoh dengan zoom\rSetelah itu, baru kita bisa tes konek ke Github dengan SSH.\nCaranya, ketik perintah berikut:\nssh -T git@github.com Jika hasilnya seperti berikut ini, berarti berhasil. Selanjutnya kita tinggal melakukan push dengan SSH.\nGambar contoh dengan zoom\r4. Konfigurasi Agar SSH Key Otomatis ditambahkan Setelah komputer di-restart, SSH Key harus ditambahkan lagi agar bisa digunakan.\nNah, biar tidak mengetik perintah ssh-add berulang-ulang, kita bisa buat konfigurasi agar SSH Key otomatis ditambahkan.\nCaranya:\nBuat file baru di dalam direktori ~/.ssh/ bernama config. Gambar contoh dengan zoom\rIsi file config dengan konfigurasi seperti ini: # Github.com server Host github.com IdentityFile ~/.ssh/dian Ganti dian dengan id SSH Key yang kamu buat.\nGambar contoh dengan zoom\rSelesai.\nApa Selanjutnya Selamat, kamu sudah berhasil setup SSH Key untuk menggunakan Github melalui SSH.\nSelanjutnya, Cobalah untuk clone repository dengan SSH dan lakukan push dan pull.\nGambar contoh dengan zoom\rSelamat Mencoba\u0026hellip;!\n","permalink":"https://gitkodachi.github.io/post/github-ssh/"},{"title":"Github Workflow: Cara Berkontribusi di Proyek Open Source","content":"Github saat ini sudah menjadi rumah bagi proyek-proyek open source.\nJutaan programmer dari seluruh dunia menaruh kodenya di sana.\nBahkan proyek open source seperti Linux, Cinnamon, Laravel, BlankOn, dll. menggunakan Github.\nBagaimana proyek-proyek itu digarap bersama?\nItulah yang akan kita pelajari pada artikel ini.\nKita akan belajar tentang Git dan Github workflow atau alur kerja Github untuk berkontribusi pada proyek open source.\nKita akan langsung melakukan kontribusi pada proyek ‚Äúdummy‚Äù yang sudah saya siapkan.\nSebelumnya siapkan dulu alat-alat berikut:\nAkun Github Git Teks Editor. ","permalink":"https://gitkodachi.github.io/post/github-workflow/"},{"title":"Kontak Kami","content":"Hubungi Kami Informasi Kontak Email: info@example.com\nTelepon: +62 21 1234 5678\nAlamat: Jl. Teknologi No. 99, Jakarta\nSilakan kirimkan pertanyaan atau pesan Anda melalui formulir berikut. Kami akan segera merespons:\nNama Lengkap\rEmail\rPesan\rKirim Pesan\r","permalink":"https://gitkodachi.github.io/contact/"},{"title":"Pertanyaan Umum","content":"Pertanyaan yang Sering Diajukan Bagaimana cara memulai belajar? Mulailah dengan tutorial untuk pemula yang sesuai dengan minat Anda. Semua tutorial tersedia di halaman utama.\nApakah ada biaya untuk mengakses konten? Tidak, semua konten di situs ini sepenuhnya gratis.\nBagaimana cara berkontribusi? Anda dapat berkontribusi melalui GitHub repository kami. Silakan kunjungi halaman kontak untuk informasi lebih lanjut.\n","permalink":"https://gitkodachi.github.io/faqs/"},{"title":"Tentang Kami","content":"Tentang Situs Ini Situs ini dibuat untuk membantu pemula mempelajari berbagai teknologi pemrograman melalui tutorial yang mudah dipahami.\nVisi Menyediakan materi pembelajaran yang berkualitas dan terjangkau untuk semua kalangan.\nMisi Membuat konten tutorial yang terstruktur Menyajikan contoh kode yang relevan Membantu pemecahan masalah praktis ","permalink":"https://gitkodachi.github.io/about/"},{"title":"Bagaimana cara mengaktifkan Windows/Office?","content":"Skrip Aktivasi Microsoft (MAS) Aktivator Windows dan Office open-source dengan berbagai metode aktivasi termasuk HWID, Ohook, TSforge, KMS38, dan Online KMS, dilengkapi fitur troubleshooting lanjutan.\nCara Mengaktivasi Windows/Office Metode 1 - PowerShell (Windows 8 dan yang lebih baru) ‚ù§Ô∏è Metode 1\rBuka Powershell\nUntuk melakukannya, tekan tombol Windows + X, lalu pilih PowerShell atau Terminal.\nSalin dan tempel kode di bawah ini, lalu tekan enter.\nirm https://get.activated.win | iex Alternatifnya, Anda dapat menggunakan yang berikut ini (ini akan ditinggalkan di masa mendatang):\nirm https://massgrave.dev/get | iex Anda akan melihat opsi aktivasi. Pilih opsi aktivasi yang disorot dengan warna hijau.\nSelesai Itu saja\nMetode 2 - Tradisional (Windows Vista dan yang lebih baru) Metode 1\rDownload dari salah satu link:\nGithub: https://github.com/\u0026hellip; Mirror: https://git.activated.win/\u0026hellip; Matikan sementara windows defender atau antivirus lainya jika ada.\nKlik kanan pada file zip yang diunduh dan ekstrak.\nPada folder hasil ekstraksi, cari folder yang bernama All-In-One-Version.\nJalankan file bernama MAS_AIO.cmd.\nAnda akan melihat opsi aktivasi. Ikuti petunjuk di layar.\nSelesai Itu saja.\nUntuk mengaktifkan produk tambahan seperti Office untuk macOS, Visual Studio, RDS CAL, dan Windows XP, check disini. Untuk menjalankan skrip dalam mode tanpa pengawasan, centang disini. Tidak bekerja ‚ùì Catatan\rJika Anda tidak dapat meluncurkan MAS menggunakan metode PowerShell, lihat Metode 2 di atas. Jika MAS diluncurkan tetapi menampilkan kesalahan, periksa langkah pemecahan masalah yang disorot dengan warna biru dan ikuti. Jika masalah masih berlanjut, jangan ragu untuk menghubungi kami disini. Perhatian\rPerintah IRM di PowerShell mengunduh skrip dari URL tertentu, dan perintah IEX mengeksekusinya. Selalu periksa ulang URL sebelum menjalankan perintah dan verifikasi sumbernya dapat dipercaya saat mengunduh file secara manual. Berhati-hatilah, karena beberapa orang menyebarkan malware yang menyamar sebagai MAS dengan mengubah URL dalam perintah IRM. MAS Rilis Terakhir Rilis Terakhir - v3.4 (3-June-2025)\nGitHub / Azure DevOps / Self-hosted Git\nFitur HWID (Lisensi Digital) Metode Aktivasi Windows Permanen Ohook Metode Aktivasi Office Permanen TSforge Metode Aktivasi Windows/ESU/Office Permanen KMS38 Metode Aktivasi Windows Hingga Tahun 2038 KMS Online Metode Aktivasi Windows/Office Selama 180 Hari (Seumur Hidup dengan Tugas Perpanjangan) Pemecahan Masalah Aktivasi Lanjutan Folder $OEM$ untuk Pra-aktivasi Ubah Edisi Windows Ubah Edisi Office Periksa Status Aktivasi Windows/Office Tersedia dalam Versi All-in-One dan File Terpisah Sepenuhnya Open Source dan Berbasis Skrip Batch Lebih Sedikit Deteksi Antivirus Activations Summary Activation Type Supported Product Activation Period Is Internet Needed? HWID Windows 10-11 Permanent Yes Ohook Office Permanent No TSforge Windows / ESU / Office Permanent Yes, needed on build 19041 and later KMS38 Windows 10-11-Server Till the Year 2038 No Online KMS Windows / Office 180 Days. Lifetime With Renewal Task Yes Untuk detail lebih lanjut, gunakan detail aktivasi masing-masing di Dokumen dan grafik perbandingan.\nUntuk mengaktifkan produk yang tidak didukung seperti Office di Mac, centang disini.\nScreenshots Gambar contoh dengan zoom\rGambar contoh dengan zoom\rGambar contoh dengan zoom\rGambar contoh dengan zoom\rGambar contoh dengan zoom\rGambar contoh dengan zoom\rGambar contoh dengan zoom\rGambar contoh dengan zoom\rGambar contoh dengan zoom\rDibuat dengan Cinta ‚ù§Ô∏è\n","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/mas/"},{"title":"BSOD","content":"Awal Mula Kemunculan BSOD Windows Sebagai catatan, BSOD pertama kali hadir di awal 1990-an. Di masa Windows 3.1, layar biru dikenal dengan sebutan blue screen of unhappiness, yang muncul saat pengguna menekan control-alt-delete untuk menutup program yang macet. Kemudian, pada 1993, istilah blue screen of death mulai digunakan di Windows NT ketika sistem benar-benar tidak bisa dipulihkan lagi.\nSebenarnya, layar hitam bukan hal baru sepenuhnya. Microsoft pernah memperkenalkannya pada Windows 11 di 2021, tapi kali ini desain dan pesan yang muncul telah diperbarui agar lebih ringkas dan relevan.\nGambar blackscreen\rAda beberapa alasan yang dapat menyebabkan Kesalahan Layar Biru: Gambar bluescreen\rPerubahan ini akan mulai dirasakan pengguna Windows 11 yang menjalankan versi 24H2 pada musim panas tahun ini. Tidak hanya soal warna, Microsoft juga menyebut bahwa pengalaman saat perangkat mengalami restart mendadak kini dirancang lebih sederhana dan cepat. Dalam blog resminya, perusahaan mengklaim proses reboot kini hanya memerlukan waktu sekitar dua detik bagi sebagian besar pengguna.\nPemecahan Masalah - Blue Screen Errors di Windows (BSOD) Kesalahan Layar Biru akan terjadi jika masalah menyebabkan sistem Anda tidak normal atau restart secara tidak terduga karena masalah perangkat lunak atau perangkat keras. Ini juga disebut BSOD (Blue Screen of Death, seperti gambar berikut).\nCatatan Teknis\rJika layar membeku pada tampilan berikut dan menjadi tidak responsif, mencegah tindakan apa pun, coba shutdown paksa terlebih dahulu. Tekan dan tahan tombol daya hingga lampu daya mati untuk mematikan perangkat. Setelah perangkat dimulai ulang, ikuti langkah-langkah pemecahan masalah di bawah ini untuk menghindari masalah di masa mendatang. Penyebab BSOD\rDari paket Windows, seperti yang disebabkan oleh Windows Update Masalah kompatibilitas antara perangkat keras baru yang diperluas dan perangkat, atau perangkat keras mengalami kesalahan Masalah kompatibilitas antara perangkat lunak dan sistem yang diinstal Virus sistem ‚Äã‚Äã‚Äã‚Äã‚Äã‚Äã‚ÄãDalam banyak kasus ketika Windows 11 dimulai ulang tiba-tiba, masalah diatasi oleh mulai ulang dan tidak diperlukan tindakan lebih lanjut. Namun, jika Windows 11 sering dimulai ulang karena kesalahan kode berhenti yang sama, cobalah langkah-langkah pemecahan masalah dasar ini untuk mengatasi masalah ini:\nLepaskan Perangkat yang Terhubung. Jika Anda menambahkan perangkat keras baru ke PC sebelum kesalahan, matikan PC, hapus perangkat keras, dan coba mulai ulang.\nMulai PC Anda dalam mode aman. Jika mengalami masalah saat memulai ulang, Anda dapat memulai PC dalam mode aman. Lihat Memulai PC Anda dalam mode aman di Windows 11 untuk detailnya. Dari mode aman, Anda dapat mencoba langkah-langkah pemecahan masalah yang tersisa.\nPeriksa Manajer Perangkat. Klik kanan tombol Mulai dan pilih Manajer Perangkat. Periksa apakah ada perangkat yang ditandai dengan tanda seru (!). Klik kanan perangkat dan pilih Perbarui driver. Jika memperbarui driver tidak membantu, coba nonaktifkan atau hapus instalan perangkat.\nPeriksa apakah ada cukup ruang kosong pada hard drive. Sistem operasi dan beberapa aplikasi memerlukan ruang kosong yang cukup untuk membuat file swap dan melakukan fungsi lainnya. Berdasarkan konfigurasi sistem, persyaratan yang tepat bervariasi, tetapi ada baiknya memiliki ruang kosong 10% hingga 15%.\nInstal Windows 11 Updates terbaru. Untuk memeriksa pembaruan, pilih Mulai ü™ü Pengaturan ‚öôÔ∏è \u0026gt; \u0026gt; Windows Update , lalu pilih Periksa pembaruan.\nPulihkan Windows 11. Jika tidak ada langkah-langkah ini yang membantu, coba pulihkan Windows 11 menggunakan titik pemulihan sistem, atau salah satu opsi lain yang tercantum di opsi Pemulihan di Windows 11. Pilih opsi pemulihan yang paling sesuai dengan skenario Anda.\nJika Anda seorang profesional TI atau pengguna tingkat lanjut, Anda dapat mencoba Langkah pemecahan masalah tingkat lanjut untuk layar biru Windows, layar hitam, dan kesalahan kode berhenti.\nSumber: Microsoft\r","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/windows/bsod/"},{"title":"Cek Status Aktivasi","content":"Sebuah skrip Windows Powershell yang kuat untuk menampilkan status lisensi Microsoft Windows dan Office.\nPembuat: abbodi1406\nRepositori Github: https://github.com/paintnokio/CAS\nCara Menggunakan Kunjungi Repositori Github Unduh file ZIP dengan mengklik tombol \u0026ldquo;Code\u0026rdquo; lalu pilih \u0026ldquo;Download ZIP\u0026rdquo; Ekstrak file ZIP ke lokasi yang diinginkan di komputer Anda Jalankan file cmd_launcher.cmd yang ada di folder hasil ekstraksi Produk yang Didukung Windows Vista dan versi lebih baru / Windows Server 2008 dan versi lebih baru Office 2010 dan versi lebih baru (MSI atau C2R), terinstal di Windows XP dan versi lebih baru Aplikasi Office UWP di Windows 10/11 Host KMS Windows dan Office (CSVLK), terinstal di Windows Server 2003 dan versi lebih baru Fitur Utama Memerlukan Windows Powershell 2.0 minimal Pengganti praktis untuk fungsi slmgr.vbs /dli /dlv xpr Menampilkan tanggal kedaluwarsa aktivasi untuk produk yang didukung Menampilkan ProductKeyChannel untuk kunci utama Windows Vista/7/8 Menampilkan status lisensi tambahan (Extended Security Updates, APPXLOB, OCUR, dll) Menampilkan status Volume Activation Active Directory untuk Windows 8+ Menampilkan status Automatic VM Activation untuk Windows Server 2012+ Menampilkan status Subscription Activation untuk Windows 11 24H2+ Mengimplementasikan fungsi vNextDiag.ps1 untuk mendeteksi lisensi Office vNext Mengimplementasikan tool Client Licensing Check untuk Windows 8+ Keunggulan Check-Activation-Status.ps1 Lebih cepat dengan metode PInvoke native dari Software Licensing Client Dll Menampilkan lebih banyak info untuk semua versi Windows dan Office yang didukung Mendukung \u0026ldquo;Client Licensing Check\u0026rdquo; untuk Windows 7 dan Vista Parameter Switch Fungsi -IID Tampilkan Offline Installation ID -Dlv Tampilkan IID, hitungan Rearm, Trusted time, Product ID (jika tersedia) -All Tampilkan status untuk semua ID -Pass Lewati prompt akhir atau pembersihan buffer window Tidak didukung Status Volume Licensing berbasis Token.\nLisensi Projek ini dilisensikan di bawah MIT License.\n","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/cas/"},{"title":"Install Windows","content":"Panduan tentang cara mencadangkan data dan menginstal ulang Windows. Prasyarat File ISO Windows asli, Anda dapat mengunduhnya dari https://devcomp.fun/microsoft-download-list/ Versi terbaru Rufus dari https://rufus.ie/ Drive USB minimal 8GB Ikuti panduan ini sebelum membuat USB yang dapat di-boot jika Anda merasa sistem tersebut terkena malware. Sistem bersih lainnya jika sistem Anda saat ini terinfeksi dengan malware File infector.\rMengapa? Karena malware penginfeksi file dapat menyalin dirinya sendiri ke USB yang dapat di-boot yang akan Anda buat untuk melakukan instalasi bersih. Anda perlu menggunakan sistem bersih lain untuk membuat USB yang dapat di-boot dan mencolokkannya ke sistem yang terinfeksi saat ini hanya jika tidak menjalankan Windows secara langsung. Bagaimana cara memeriksa apakah Anda memiliki malware penginfeksi file? Buka PowerShell sebagai admin dan masukkan sc.exe start \u0026quot;sppsvc\u0026quot; \u0026gt; $null 2\u0026gt;\u0026amp;1; Write-Host \u0026quot;Error code: $LASTEXITCODE\u0026quot;\nIf the output is 577 or 225, then most likely chances are that the system is infected with File infector malware.\nBagaimana jika Anda tidak memiliki sistem bersih lainnya? Anda dapat mencoba Dr.Web https://free.drweb.com/download+cureit/gr untuk menghapus malware penginfeksi file. Namun dalam beberapa kasus, mungkin tidak dapat menghapus semuanya, oleh karena itu sebaiknya buat USB yang dapat di-boot pada sistem lain yang bersih.\nCadangkan data Anda Proses instalasi bersih akan memformat drive C tempat Windows diinstal; jika Anda memiliki data apa pun di drive C, Anda perlu mencadangkannya.\nMultiple partition\rOne partition\rData Anda biasanya terletak di tempat berikut pada drive C. Buka folder ini C:\\Users lalu pilih akun pengguna yang Anda gunakan. Data Anda disimpan di folder Desktop, Documents, Downloads, Music, Pictures, dan Videos. Simpan folder ini di partisi lain untuk dicadangkan.\rData Anda biasanya terletak di tempat berikut pada drive C, Buka folder ini C:\\Users lalu pilih akun pengguna yang Anda gunakan. Data Anda disimpan di folder Desktop, Documents, Downloads, Music, Pictures, dan Videos. Jika Anda memiliki sedikit data untuk dicadangkan, simpan di drive online yang tercantum di bawah ini atau drive USB setelah membuatnya dapat di-boot dengan Rufus. Jika Anda memiliki banyak data yang tidak dapat disimpan di drive eksternal atau drive online, Buat partisi lain menggunakan panduan ini https://youtu.be/_HgjasKuOBw Simpan data Anda ke partisi lain yang baru dibuat.\rPerhatian\rMencadangkan data penting Anda pada beberapa drive online juga, misalnya:\nGoogleDrive - 15GB Free OneDrive - 5GB Free Mega - 20GB Free Filen - 10GB Free Buat USB yang dapat di-boot dengan Rufus Hubungkan drive USB Anda ke sistem. (Datanya akan dihapus.) Luncurkan Rufus yang Anda unduh sebelumnya. Pada menu tarik-turun \u0026ldquo;Device\u0026rdquo;, pilih flash drive USB Anda. Pemilihan Booting: Klik \u0026ldquo;SELECT\u0026rdquo; dan pilih berkas ISO Windows Anda. Rufus akan mengonfigurasi pengaturan optimal secara otomatis. Klik \u0026ldquo;START.\u0026rdquo; Tunggu Rufus membuat USB yang dapat di-boot. Mungkin perlu waktu beberapa menit. Anda akan melihat \u0026ldquo;READY\u0026rdquo; setelah selesai. Windows 11 pada Perangkat Keras yang Tidak Didukung Klik di sini untuk melihat\rRufus dapat membantu Anda menginstal Windows 11 pada perangkat keras yang tidak didukung, tetapi Anda akan mengalami masalah dengan pembaruan fitur di masa mendatang karena Microsoft tidak mengizinkannya pada perangkat keras tersebut. Untuk mengatasi masalah ini, Anda perlu menginstal IoT Enterprise 24H2 (2024) edition yang didukung secara resmi pada perangkat keras yang tidak didukung. Jangan khawatir karena ini adalah edisi yang tidak biasa; versi binernya identik dengan edisi lain, dengan perbedaan utama terletak pada lisensinya. Edisi IoT Enterprise ini hadir dalam 2 versi, IoT Enterprise (GAC, General Availability Channel) IoT Enterprise (LTSC, Long-Term Servicing Channel) Pertanyaan berikutnya, bagaimana cara menginstal edisi ini? Untuk versi GAC, Anda tidak memerlukan IoT Enterprise ISO, Anda cukup menggunakan Windows 11 24H2 consumer (tertaut di bagian atas) atau business ISO biasa. Untuk versi LTSC, Anda perlu mengunduh versi lengkap LTSC ISO (jangan gunakan eval), tidak harus IoT ISO, Anda dapat mengunduh LTSC ISO biasa dalam bahasa Anda. Setelah mem-flash ISO yang diperlukan menggunakan Rufus, navigasikan ke \\sources\\ folder pada drive USB dan buat file bernama PID.txt (pastikan ekstensi file sudah benar). Buka file ini dengan Notepad dan masukkan teks di bawah ini.\nUntuk versi GAC [PID] Value=XQQYW-NFFMW-XJPBH-K8732-CKFFD Untuk versi LTSC [PID] Value=CGK42-GYN6Y-VD22B-BX98W-J8JXD Saat menginstal Windows, pastikan untuk tidak menggunakan versi lama penginstal. Selesai. Pengaturan akan otomatis memilih edisi IoT Enterprise. Atau, jika Anda tidak ingin melakukannya, Anda dapat menginstal Windows secara normal dan kemudian mengubah edisi ke IoT Enterprise.\nDaftar Edisi Selama Instalasi Windows Klik di sini untuk melihat\rJika sistem Anda memiliki lisensi OEM yang dipasang oleh produsen pada motherboard, maka pengaturan Windows tidak akan menampilkan daftar edisi dan akan secara otomatis memilih edisi berdasarkan lisensi pada motherboard. Jika Anda memiliki perangkat keras tersebut dan ingin melihat daftar edisi yang tersedia untuk instalasi Windows, ikuti langkah-langkah di bawah ini. Setelah mem-flash ISO yang diperlukan menggunakan Rufus, navigasikan ke \\sources\\ folder pada drive USB dan buat file bernama ei.cfg (pastikan ekstensi file sudah benar). Buka file ini dengan Notepad dan masukkan teks di bawah ini. Channel\nSekarang Anda dapat melihat daftar edisi dan memilih edisi yang Anda inginkan dari Windows Vista hingga Windows 11. Ini juga membantu Anda menghindari penginstalan kunci dalam pengaturan Windows 8/8.1 di mana penginstalan kunci tidak dapat dilewati. Catatan:\nDi Windows 11 24H2, penginstal baru tidak mendukung ini, jadi Anda perlu memilih opsi penginstal \u0026ldquo;lama\u0026rdquo; saat pengaturan dimulai. Jika Anda menggunakan PID.txt, harap perhatikan bahwa ini akan diutamakan daripada ei.cfg. Instal Bersih Windows Lepaskan semua drive eksternal atau internal yang tidak bisa di-boot untuk mengurangi risiko penginstalan. Nyalakan ulang PC Anda dan boot dari flash drive USB, biasanya diakses dengan menekan F11 atau F12 saat memulai. Jika tidak berhasil, cari di Google jenis perangkat yang Anda miliki diikuti dengan \u0026ldquo;tombol menu boot\u0026rdquo;, misalnya, \u0026ldquo;tombol menu boot Asus Zephyrus G14\u0026rdquo; dan temukan hasil untuk nomor model Anda. Ikuti petunjuk di layar. Pilih \u0026ldquo;Kustom: Instal Windows saja (lanjutan)\u0026rdquo; untuk penginstalan bersih. Hapus semua partisi pada drive boot, atau jika Anda ingin menyimpan partisi data, hapus hanya drive C dan partisi sistem kecil lainnya, dan pilih ruang yang tidak terisi yang dibuat. Klik \u0026ldquo;Berikutnya\u0026rdquo; untuk memulai penginstalan. Windows akan secara otomatis membuat partisi yang diperlukan. Perhatian\rAnda dapat terhubung dengan kami untuk bantuan jika Anda membutuhkan. ","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/clean-install-windows/"},{"title":"Menhapus Malware","content":"Panduan Membersihakan Malware Unduh dan instal Malwarebytes untuk memindai malware, jika Anda memiliki malware penginfeksi file, gunakan Dr.Web untuk memindainya.\nKarantina malware yang terdeteksi.\nMenghapus malware tidak akan memperbaiki kerusakan yang disebabkan oleh malware. Untuk memperbaiki sistem Anda, instal ulang Windows sesuai panduan di bawah ini.\nPerhatian\rSetelah Anda menghapus malware dan menginstal ulang Windows, ubah kata sandi untuk semua akun Anda. Jika Anda ingin menemukan perangkat lunak dan permainan yang aman dan terhindar dari malware, [lihatlah] (https://fmhy.net/beginners-guide) Perhatian\rAntimalware dapat menghapus sebagian besar malware tetapi tidak dapat membatalkan semua kerusakan yang disebabkan oleh malware dalam sistem. Misalnya, malware dapat menginfeksi file sistem, merusak pembaruan dan keamanan Windows serta registri penting, atau bahkan menyembunyikan malware di suatu tempat yang tidak dapat ditemukan oleh antimalware.\nOleh karena itu, jika terjadi infeksi malware, Anda harus melakukan instalasi sistem yang bersih menggunakan drive USB yang dapat di-boot dan memformat drive C serta partisi EFI/Sistem. (Jangan gunakan opsi pengaturan ulang, malware dapat tetap ada dalam kasus tersebut.)\nAnda bisa terhubung dengan kami untuk bantuan. ","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/remove-malware/"},{"title":"Metode ODT","content":"Office C2R Custom Install Catatan Jika panduan di bawah membingungkan, opsi termudah adalah menggunakan Office C2R Installer. Office Retail (contoh: O365) memiliki pembaruan fitur terbaru sedangkan Office Volume (contoh: ProPlus 2024) tidak. Perlu diketahui bahwa dalam metode instalasi custom Office C2R resmi, tidak tersedia ISO atau solusi satu-klik. Berikut panduan paling sederhana untuk instalasi Office yang dikustomisasi. Panduan Instalasi Custom Jika Office pernah terinstal sebelumnya: Uninstall Office melalui fitur Apps \u0026amp; Features di pengaturan Windows. Jalankan file OfficeScrubber.cmd dari Office Scrubber oleh abbodi1406 dan pilih opsi [R] Remove all Licenses. Buat folder baru bernama Office di drive C:\\, contoh: C:\\Office Unduh Office Deployment Tool (ODT) Salin file setup.exe yang diunduh ke folder Office tadi, contoh: C:\\Office\\setup.exe Kunjungi config.office.com Untuk Office Retail, pilih Microsoft 365 Apps for enterprise di bagian office suites. Untuk Office Volume, pilih Office LTSC Professional Plus 2024 - Volume License (jangan pilih versi SPLA). Anda bisa menambahkan Visio dan Project jika diperlukan, pastikan bahasa yang didukung untuk Project dan Visio dipilih. Jika ingin mengunduh file Office untuk diinstal nanti, pastikan memilih nomor versi spesifik (bukan \u0026rsquo;latest\u0026rsquo;) di opsi Select the version. Hanya perlu mengkonfigurasi hingga bagian \u0026ldquo;Language\u0026rdquo;. Sisanya bisa dibiarkan default. Klik tombol export, pilih \u0026ldquo;Keep Current Settings\u0026rdquo; untuk mengunduh file Configuration.xml (jika namanya berbeda, ubah menjadi Configuration.xml). Salin file Configuration.xml ke folder Office tadi, contoh: C:\\Office\\Configuration.xml Instal Langsung\rUnduh lalu Instal\rüìå Buka **command prompt** (bukan Powershell) **sebagai admin** dan jalankan perintah:\rcd /d C:\\Office\\ setup.exe /configure Configuration.xml ‚ö†Ô∏è Sekarang akan menginstal Office.\nüí° Pastikan Anda telah memilih nomor versi tertentu dalam konfigurasi sesuai langkah-langkah di atas.\nüìå Buka command prompt (bukan Powershell) sebagai admin dan jalankan perintah di bawah ini Unduh file Office\ncd /d C:\\Office\\ setup.exe /download Configuration.xml üîß Untuk menginstal dari file yang telah diunduh (bisa dilakukan offline):\ncd /d C:\\Office\\ setup.exe /configure Configuration.xml Error Umum\rPastikan menjalankan perintah di command prompt (CMD) sebagai admin. Ekstensi file sering tersembunyi di Windows, sehingga beberapa orang mungkin salah memberi nama Configuration.xml.xml karena .xml tidak terlihat. Metode Alternatif YAOCTRU (Pengunduh Office) \u0026amp; YAOCTRI (Pemasang Office) Office Tool Plus Butuh bantuan? Cek disini. ","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/office_c2r_custom/"},{"title":"Office C2R Links","content":"Semua tautan di bawah ini bersumber resmi dari Microsoft dengan lisensi Retail dan saluran pembaruan terkini.\nCatatan Penting üìå Klik untuk informasi lengkap\rPembaruan Otomatis: Microsoft selalu memperbarui file melalui tautan yang sama, jadi Anda tidak perlu mencari tautan baru\nUkuran File:\nSemua versi C2R memiliki ukuran file seragam (ProPlus, Excel, OneNote, dll) Online Installer: Lebih hemat kuota (hanya mengunduh 1 arsitektur) Ukuran sekitar 2-3MB Offline Installer: Berisi kedua arsitektur (x86 \u0026amp; x64) Ukuran sekitar 5-6GB Versi Aplikasi:\n‚úîÔ∏è Online: Selalu versi terbaru ‚è≥ Offline: Versi 5-6 bulan lebih tua (perlu update setelah instalasi) Untuk Pengguna Lanjut:\nKastum instalasi: Metode ODT Paket bahasa: Language Pack for Office Instalasi Volume murni (lihat panduan khusus) Office Mana yang Terbaik? üìä Klik untuk informasi perbandingan\rMicrosoft 365 lebih unggul dibanding Office 2024 karena menyertakan fitur-fitur eksklusif berikut:\nüé® Designer di PowerPoint ‚úçÔ∏è Microsoft Editor di Word üìà Formula terbaru di Excel üñãÔ∏è Font \u0026amp; Ikon Premium ‚ôø Peningkatan aksesibilitas Perbedaan Pembaruan:\nüîÑ Microsoft 365: Mendapat pembaruan fitur rutin Penyempurnaan aplikasi secara berkala üîí Office 2024: Hanya menerima pembaruan keamanan Tidak ada penambahan fitur baru Masalah Instalasi Office üõ†Ô∏è Klik untuk solusi troubleshooting\rJika muncul error \u0026ldquo;tidak bisa instal di channel update yang dipilih\u0026rdquo; atau error lainnya:\nBersihkan instalasi lama:\nUnduh Office Scrubber Ekstrak file ZIP yang diunduh Jalankan OfficeScrubber.cmd sebagai Admin Pilih opsi Scrub ALL Tunggu proses selesai (10-15 menit) Jika error masih muncul:\nGunakan versi offline installer Pastikan arsitektur (32/64-bit) sesuai Informasi\rUntuk Windows 7 dan 8.1, gunakan file Office 2016 Offline untuk menginstal Office. Versi Office yang lebih baru tidak didukung di sistem operasi lawas ini.\nDi Windows 10/11 ARM64, jika penginstal online tidak bekerja, gunakan file offline untuk menginstal Office.\nO365 menyediakan fitur terlengkap dan terbaru. Jika Anda ingin lebih banyak aplikasi, pilih O365ProPlusRetail, dan jika ingin lebih sedikit aplikasi, gunakan O365AppsBasicRetail.\nButuh bantuan? Periksa di sini. Microsoft 365 / Sub\rOffice 2024\rOffice 2021\rOffice 2019\rOffice 2016\rOffice 2013\rProduct ID Included Apps Online x64 Online x32 Offline x32-x64 O365ProPlusRetail Access, Excel, Lync, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link ‚ù§Ô∏è Link Link O365AppsBasicRetail Excel, OneNote, PowerPoint, Word, OneDrive Link Link NA O365BusinessRetail Access, Excel, Lync, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link Link O365EduCloudRetail Excel, OneNote, PowerPoint, Word, OneDrive Link Link NA O365HomePremRetail Access, Excel, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link Link O365SmallBusPremRetail Access, Excel, Lync, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link NA ProjectProRetail Project Link Link NA VisioProRetail Visio, OneDrive Link Link NA Product ID Included Apps Online x64 Online x32 Offline x32-x64 Access2024Retail Access Link Link Link Excel2024Retail Excel, OneDrive Link Link Link Home2024Retail Excel, OneNote, PowerPoint, Word, OneDrive Link Link Link HomeBusiness2024Retail Excel, OneNote, Outlook, PowerPoint, Word, OneDrive Link Link Link Outlook2024Retail Outlook Link Link Link PowerPoint2024Retail PowerPoint, OneDrive Link Link Link ProjectPro2024Retail Project Link Link Link ProjectStd2024Retail Project Link Link Link ProPlus2024Retail Access, Excel, OneNote, Outlook, PowerPoint, Word, OneDrive Link Link Link VisioPro2024Retail Visio, OneDrive Link Link Link VisioStd2024Retail Visio, OneDrive Link Link Link Word2024Retail Word, OneDrive Link Link Link Product ID Included Apps Online x64 Online x32 Offline x32-x64 Access2021Retail Access Link Link Link Excel2021Retail Excel, OneDrive Link Link Link HomeBusiness2021Retail Excel, OneNote, Outlook, PowerPoint, Word, OneDrive Link Link Link HomeStudent2021Retail Excel, OneNote, PowerPoint, Word, OneDrive Link Link Link OneNote2021Retail OneNote Link Link NA Outlook2021Retail Outlook Link Link Link Personal2021Retail Excel, Outlook, Word, OneDrive Link Link NA PowerPoint2021Retail PowerPoint, OneDrive Link Link Link Professional2021Retail Access, Excel, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link Link ProjectPro2021Retail Project Link Link Link ProjectStd2021Retail Project Link Link Link ProPlus2021Retail Access, Excel, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link Link Publisher2021Retail Publisher, OneDrive Link Link Link SkypeforBusiness2021Retail Lync, OneDrive Link Link NA Standard2021Retail Excel, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link NA VisioPro2021Retail Visio, OneDrive Link Link Link VisioStd2021Retail Visio, OneDrive Link Link Link Word2021Retail Word, OneDrive Link Link Link Product ID Included Apps Online x64 Online x32 Offline x32-x64 Access2019Retail Access Link Link Link AccessRuntime2019Retail Access Link Link NA Excel2019Retail Excel, OneDrive Link Link Link HomeBusiness2019Retail Excel, OneNote, Outlook, PowerPoint, Word, OneDrive Link Link Link HomeStudent2019Retail Excel, OneNote, PowerPoint, Word, OneDrive Link Link Link Outlook2019Retail Outlook Link Link Link Personal2019Retail Excel, Outlook, Word, OneDrive Link Link NA PowerPoint2019Retail PowerPoint, OneDrive Link Link Link Professional2019Retail Access, Excel, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link Link ProjectPro2019Retail Project Link Link Link ProjectStd2019Retail Project Link Link Link ProPlus2019Retail Access, Excel, Lync, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link Link Publisher2019Retail Publisher, OneDrive Link Link Link SkypeforBusiness2019Retail Lync, OneDrive Link Link NA SkypeforBusinessEntry2019Retail Lync, OneDrive Link Link NA Standard2019Retail Excel, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link NA VisioPro2019Retail Visio, OneDrive Link Link Link VisioStd2019Retail Visio, OneDrive Link Link Link Word2019Retail Word, OneDrive Link Link Link Product ID Included Apps Online x64 Online x32 Offline x32-x64 AccessRetail Access Link Link Link AccessRuntimeRetail Access Link Link NA ExcelRetail Excel, OneDrive Link Link Link HomeBusinessPipcRetail Excel, OneNote, Outlook, PowerPoint, Word, OneDrive Link Link NA HomeBusinessRetail Excel, OneNote, Outlook, PowerPoint, Word, OneDrive Link Link Link HomeStudentRetail Excel, OneNote, PowerPoint, Word, OneDrive Link Link Link HomeStudentVNextRetail Excel, OneNote, PowerPoint, Word, OneDrive Link Link NA OneNoteFreeRetail OneNote Link Link NA OneNoteRetail OneNote Link Link NA OutlookRetail Outlook Link Link Link PersonalPipcRetail Excel, Outlook, Word, OneDrive Link Link NA PersonalRetail Excel, Outlook, Word, OneDrive Link Link NA PowerPointRetail PowerPoint, OneDrive Link Link Link ProfessionalPipcRetail Access, Excel, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link NA ProfessionalRetail Access, Excel, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link Link ProjectProRetail Project Link Link Link ProjectStdRetail Project Link Link Link ProPlusRetail Access, Excel, Lync, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link Link PublisherRetail Publisher, OneDrive Link Link Link SkypeforBusinessEntryRetail Lync, OneDrive Link Link NA SkypeforBusinessRetail Lync, OneDrive Link Link NA SkypeServiceBypassRetail Lync, OneDrive Link Link NA StandardRetail Excel, OneNote, Outlook, PowerPoint, Publisher, Word, OneDrive Link Link NA VisioProRetail Visio, OneDrive Link Link Link VisioStdRetail Visio, OneDrive Link Link Link WordRetail Word, OneDrive Link Link Link Perhatian\rPenginstalan Office 2013 dari penginstal Offline tidak dapat diperbarui. Gunakan penginstal online.\rProduct ID Included Apps Online x64 Online x32 Offline x32-x64 AccessRetail Access Link Link Link ExcelRetail Excel Link Link Link GrooveRetail Groove Link Link NA HomeBusinessPipcRetail Excel, OneNote, Outlook, PowerPoint, Word Link Link NA HomeBusinessRetail Excel, OneNote, Outlook, PowerPoint, Word Link Link Link HomeStudentRetail Excel, OneNote, PowerPoint, Word Link Link Link InfoPathRetail InfoPath Link Link NA LyncAcademicRetail Lync Link Link NA LyncEntryRetail Lync Link Link NA LyncRetail Lync Link Link NA O365BusinessRetail Excel, Groove, OneNote, Outlook, PowerPoint, Publisher, Word Link Link NA O365HomePremRetail Access, Excel, OneNote, Outlook, PowerPoint, Publisher, Word Link Link Link O365ProPlusRetail Access, Excel, Groove, InfoPath, Lync, OneNote, Outlook, PowerPoint, Publisher, Word Link Link NA O365SmallBusPremRetail Access, Excel, Groove, InfoPath, Lync, OneNote, Outlook, PowerPoint, Publisher, Word Link Link NA OneNoteFreeRetail OneNote Link Link NA OneNoteRetail OneNote Link Link NA OutlookRetail Outlook Link Link Link PersonalPipcRetail Excel, Outlook, Word Link Link NA PersonalRetail Excel, Outlook, Word Link Link NA PowerPointRetail PowerPoint Link Link Link ProfessionalPipcRetail Access, Excel, OneNote, Outlook, PowerPoint, Publisher, Word Link Link NA ProfessionalRetail Access, Excel, OneNote, Outlook, PowerPoint, Publisher, Word Link Link Link ProjectProRetail Project Link Link Link ProjectStdRetail Project Link Link Link ProPlusRetail Access, Excel, Groove, InfoPath, Lync, OneNote, Outlook, PowerPoint, Publisher, Word Link Link NA PublisherRetail Publisher Link Link Link SPDRetail SharePointDesigner Link Link NA StandardRetail Excel, Groove, OneNote, Outlook, PowerPoint, Publisher, Word Link Link NA VisioProRetail Visio Link Link Link VisioStdRetail Visio Link Link Link WordRetail Word Link Link Link ","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/office_c2r_links/"},{"title":"Pemecahan Masalah","content":"Penyelesaian Masalah Pastikan Anda menggunakan versi terbaru.\nHubungi kami di Discord ( pendaftaran tidak diperlukan) atau GitHub dengan tangkapan layar kesalahan.\n","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/troubleshoot/"},{"title":"Sofware Download","content":"Software kategori list üñ•Ô∏è Sistem Operasi Windows ‚ù§Ô∏è (All Versi ISO) macOS Coming Soon (Hackintosh/VM) Linux Coming Soon (Distro Populer) iOS Coming Soon (Jailbreak Tools) Android Coming Soon (Custom ROM) üè¢ Perkantoran Microsoft Office (Word, Excel, PPT) LibreOffice üÜì Open-source WPS Office (Alternatif Ringan) Google Workspace ‚òÅÔ∏è Cloud-based üíª Pengembangan Tool Kategori Link VS Code Code Editor Download IntelliJ IDEA Java IDE Download Docker Containerization Download Postman API Testing Download üé® Desain \u0026amp; Multimedia üñåÔ∏è Desain Adobe Photoshop üèÜ Editor Foto Pro Figma üåê UI/UX Online Inkscape üÜì Vector Gratis üé¨ Multimedia DaVinci Resolve üé• Editor Video Pro OBS Studio üìπ Streaming \u0026amp; Recording Foobar2000 üé∂ Audio Player Minimalis üîê Keamanan Bitdefender üõ°Ô∏è Antivirus No.1 KeePassXC üîë Password Manager GlassWire üåê Network Monitor üìå Utilities 7-Zip üì¶ Kompresi File Everything üîç Pencarian File Super Cepat Rufus üìÄ Bootable USB Creator ","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/download-software/"},{"title":"Status Aktivasi","content":"Check Activation Status Skrip Periksa Status Aktivasi di MAS merupakan pengembangan dari CAS oleh abbodi1406. Anda dapat membaca lebih lanjut tentang fitur-fiturnya disni.\nContoh Golang\rCopy\rpackage main\rimport \"fmt\"\rfunc main() {\rfmt.Println(\"Halo Dunia\")\r}\rTest A\rTest B\rIsi A\rIsi B\rMetode 1\rcontoh details\rPerhatian\rtype=\u0026ldquo;tip\u0026rdquo; untuk saran praktis type=\u0026ldquo;note\u0026rdquo; untuk catatan teknis type=\u0026ldquo;warning\u0026rdquo; untuk peringatan risiko type=\u0026ldquo;danger\u0026rdquo; untuk konsekuensi kritis type=\u0026ldquo;info\u0026rdquo; untuk keterangan umum Sumber: Nama Website/Sumber\rGambar contoh dengan zoom\rflowchart LR flowchart LR\ry(\"üë´ You\") --\u003e h{\"ü§ù Found this helpful?\"}\rh --\u003e |Yes| r[/\"‚≠ê Check out my featured posts!\"/]\rh --\u003e |No| su[/\"üìù Suggest changes by clicking near the title\"/]\rclick r \"/categories/featured\" _blank\rgitGraph gitGraph\rcommit\rbranch feature\rcheckout feature\rcommit\rcheckout main\rmerge feature\r","permalink":"https://gitkodachi.github.io/kategori/tutorial-lainnya/checkactivationstatus/"},{"title":"Tutorial Laravel 11 untuk Pemula: Langsung Bisa bikin CRUD!","content":"Pendahuluan Laravel 11 hadir dengan berbagai fitur baru yang membuat pengembangan web lebih efisien\u0026hellip;\nInstalasi Laravel 11 composer create-project laravel/laravel:^11.0 my-project Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \u0026ldquo;de Finibus Bonorum et Malorum\u0026rdquo; (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \u0026ldquo;Lorem ipsum dolor sit amet..\u0026rdquo;, comes from a line in section 1.10.32.\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \u0026ldquo;de Finibus Bonorum et Malorum\u0026rdquo; by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.\n","permalink":"https://gitkodachi.github.io/kategori/basic-programming/tutorial-laravel/"},{"title":"Tutorial Laravel 11 untuk Pemula: Langsung Bisa bikin CRUD!","content":"Pendahuluan Laravel 11 hadir dengan berbagai fitur baru yang membuat pengembangan web lebih efisien\u0026hellip;\nInstalasi Laravel 11 composer create-project laravel/laravel:^11.0 my-project Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \u0026ldquo;de Finibus Bonorum et Malorum\u0026rdquo; (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \u0026ldquo;Lorem ipsum dolor sit amet..\u0026rdquo;, comes from a line in section 1.10.32.\nThe standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \u0026ldquo;de Finibus Bonorum et Malorum\u0026rdquo; by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.\n","permalink":"https://gitkodachi.github.io/post/tutorial-laravel/"},{"title":"Tutorial Laravel 11 untuk Pemula: Langsung Bisa bikin CRUD!","content":"Pendahuluan Laravel 11 hadir dengan berbagai fitur baru yang membuat pengembangan web lebih efisien\u0026hellip;\nInstalasi Laravel 11 Contoh Kode\rCopy\rcomposer create-project laravel/laravel:^11.0 my-project\rContoh Kode\rCopy\rcomposer create-project laravel/laravel:^11.0 my-project\rContoh Kode\rCopy\recho \"Hello World\"\r","permalink":"https://gitkodachi.github.io/post/tutorial/"},{"title":"Laravel","content":"#Laravel Pemula bisa langsung bikin CRUD!\nTutorial Laravel untuk Pemula Sabardi\nPengenalan Laravel Laravel adalah sebuah framework PHP yang open source dan dirancang untuk memudahkan pengembangan aplikasi web\u0026hellip;\n","permalink":"https://gitkodachi.github.io/post/laravel/"},{"title":"Tutorial Laravel 11 untuk Pemula: Langsung Bisa bikin CRUD!","content":"#Laravel #PHP #MySQL Pemula bisa langsung bikin CRUD!\nTutorial Laravel untuk Pemula Sabardi\nPengenalan Laravel Laravel adalah sebuah framework PHP yang open source dan dirancang untuk memudahkan pengembangan aplikasi web\u0026hellip;\n","permalink":"https://gitkodachi.github.io/kategori/web-programming/laravel/"},{"title":"Laravel Dataviz","content":"Studi kasus mendalam bagaimana mempersiapkan perintah SQL dari database sampai menampilkan dalam 25+ macam visualisasi.\nDi ebook ini kita akan diajak bersimulasi menjadi seorang fullstack developer yang memiliki client yaitu Hana Hotel.\nHana Hotel sudah beroperasi sejak tahun 2016 sampai sekarang. Kamu mendapatkan sebuah permintaan yaitu membuat dashboard berbasis web yang akan menampilkan beberapa ukuran penting yang menunjukan performa hotel.\nHotel ini sudah memiliki sistem informasi tersendiri, tugasmu berfokus mengembangkan fitur dashboard.\nKamu akan diberikan struktur database dan data dari sistem tersebut yang memuat data bookings dari tahun 2016 sampai tahun 2020, data tamu, kepuasan tamu, layanan yang tersedia, dan kamar hotel.\n","permalink":"https://gitkodachi.github.io/buku/laravel-datables/"},{"title":"Laravel Dataviz","content":"Studi kasus mendalam bagaimana mempersiapkan perintah SQL dari database sampai menampilkan dalam 25+ macam visualisasi.\nDi ebook ini kita akan diajak bersimulasi menjadi seorang fullstack developer yang memiliki client yaitu Hana Hotel.\nHana Hotel sudah beroperasi sejak tahun 2016 sampai sekarang. Kamu mendapatkan sebuah permintaan yaitu membuat dashboard berbasis web yang akan menampilkan beberapa ukuran penting yang menunjukan performa hotel.\nHotel ini sudah memiliki sistem informasi tersendiri, tugasmu berfokus mengembangkan fitur dashboard.\nKamu akan diberikan struktur database dan data dari sistem tersebut yang memuat data bookings dari tahun 2016 sampai tahun 2020, data tamu, kepuasan tamu, layanan yang tersedia, dan kamar hotel.\n","permalink":"https://gitkodachi.github.io/buku/laravel-dataviz/"},{"title":"Laravel Dataviz","content":"Buku ini berisi panduan membuat aplikasi realtime dengan Laravel dan Websockets. Setelah membaca ebook ini pembaca akan memperoleh pengetahuan bagaimana membuat fitur realtime dengan Laravel dan Vue tanpa memanfaatkan package laravel-websockets. Selain itu pembaca akan bisa membuat komponen vue yang bereaksi terhadap event di laravel serta bisa menggunakan chartjs dengan vue.\nNote:\nBuku ini adalah buku bonus yang akan kamu dapatkan setelah membeli bundle buku Laravel dan Vuejs\n","permalink":"https://gitkodachi.github.io/buku/laravel-realtime/"},{"title":"Laravel Dataviz","content":"Buku ini berisi panduan membuat aplikasi realtime dengan Laravel dan Websockets. Setelah membaca ebook ini pembaca akan memperoleh pengetahuan bagaimana membuat fitur realtime dengan Laravel dan Vue tanpa memanfaatkan package laravel-websockets. Selain itu pembaca akan bisa membuat komponen vue yang bereaksi terhadap event di laravel serta bisa menggunakan chartjs dengan vue.\n","permalink":"https://gitkodachi.github.io/buku/laravel/"},{"title":"Laravel Dataviz","content":"Apakah kamu ingin menguasai ReactJS tapi bingung mulai dari mana?\nAtau kamu sudah beli course React tapi tetep belum paham?\nSering bertanya di forum tapi malah diminta baca dokumentasi?\nBaca dokumentasi tapi masih bingung?\nAtau kamu sudah bisa ReactJS tetapi ingin mempelajari React Modern \u0026amp; Ekosistemnya?\nSudah belajar ReactJS tapi bingung di bagian Javascript Modern nya?\nNote: Buku ini satu paket dengan buku React \u0026amp; Express\n","permalink":"https://gitkodachi.github.io/buku/modern-react/"},{"title":"Laravel Dataviz","content":"Sebuah E-Book dalam Bahasa Indonesia yang akan menjadikan anda seorang pengembang aplikasi web modern yang handal. Disajikan secara sederhana, namun tetap up-to-date dengan standar dan perkembangan terbaru baik itu di ekosistem AWS maupun React.\nStudi Kasus Dalam e-book ini kita akan membahas mengenai konsep dasar dan juga studi kasus aplikasi web untuk daftar lowongan kerja React di Indonesia yang akan kita sebut dengan JagoReact Job Board. Aplikasi ini akan kita bangun sepenuhnya dengan menggunakan layanan-layanan serverless.\n","permalink":"https://gitkodachi.github.io/buku/react-aws/"},{"title":"Laravel Dataviz","content":"Apakah kamu ingin menguasai ReactJS tapi bingung mulai dari mana?\nAtau kamu sudah beli course React tapi tetep belum paham?\nSering bertanya di forum tapi malah diminta baca dokumentasi?\nBaca dokumentasi tapi masih bingung?\nAtau kamu sudah bisa ReactJS tetapi ingin mempelajari React Modern \u0026amp; Ekosistemnya?\nSudah belajar ReactJS tapi bingung di bagian Javascript Modern nya?\nNote: Buku ini satu paket dengan buku Modern React\n","permalink":"https://gitkodachi.github.io/buku/react-express/"},{"title":"Laravel Dataviz","content":"Vue (dibaca: view) merupakan salah satu dari sekian banyak pustaka (library) pada bahasa pemrograman Javascript yang digunakan untuk membangun tampilan antarmuka pengguna (user interface) dari suatu aplikasi berbasis web khususnya untuk aplikasi berbasis halaman tunggal atau single page application (SPA).\nVue sebagaimana Javascript (JS) memang awalnya didesain untuk kebutuhan web, namun seiring perkembangan teknologi yang mendukung JS, maka saat ini Vue juga mulai dapat digunakan untuk mengembangkan aplikasi berbasis desktop dan mobile.\n","permalink":"https://gitkodachi.github.io/buku/vuejs/"},{"title":"Cara Menginstall Virtualbox di Windows","content":"VirtualBox perangkat lunak virtualisasi sumber terbuka dan gratis oleh Oracle digunakan untuk menjalankan berbagai sistem operasi dalam lingkungan Windows Anda yang ada. Hal ini memungkinkan Anda menguji perangkat lunak baru, menjelajahi sistem operasi yang berbeda, atau bahkan menjalankan aplikasi lama yang mungkin tidak kompatibel dengan sistem Anda saat ini.\nPanduan ini akan memandu Anda melalui prosedur untuk menginstal VirtualBox Windows memastikan pengaturan yang lancar dan sukses serta ikhtisar tentang cara menggunakan VirtualBox di Windows.\nPengertian Virtualisasi Virtualisasi pada dasarnya menciptakan mesin virtual sebuah program perangkat lunak yang meniru komputer fisik. Mesin virtual ini kemudian dapat menjalankan sistem operasinya, terpisah dari mesin host. Hal ini memungkinkan Anda untuk bereksperimen dengan sistem operasi yang berbeda tanpa mempengaruhi sistem utama Anda atau menyediakan lingkungan yang aman untuk menguji perangkat lunak yang tidak tepercaya. Berikut adalah beberapa manfaat utama menggunakan VirtualBox:\nInstal dan jalankan berbagai sistem operasi seperti Linux, macOS, atau versi Windows yang lebih lama dalam lingkungan Windows Anda. Uji perangkat lunak atau aplikasi baru di lingkungan sandbox tanpa mempertaruhkan sistem utama Anda Jaga agar aplikasi lama yang mungkin tidak kompatibel dengan sistem operasi Anda saat ini tetap berfungsi. VirtualBox memungkinkan Anda mengalokasikan sumber daya tertentu seperti inti RAM dan CPU ke setiap VM yang mengoptimalkan pemanfaatan sumber daya. Persyaratan Sistem Sebelum melanjutkan, pastikan sistem Windows Anda memenuhi persyaratan minimum untuk menjalankan VirtualBox secara efektif:\nProsesor 64-bit. Minimal 4GB Ram degan setidaknya 2GB dialokasikan untuk VM. Hardisk 300Mb atau gunakan SSD agar respon baik untuk aplikasi VirtualBox dan ruang tambahan untuk setiap mesin virtual. Extensi virtualisasi perangkat keras diaktifkan di pengaturan BIOS anda. Mengaktifkan Virtualisasi Perangkat Keras mungkin memerlukan memulai ulang sistem Anda. Merujuk ke posting kami Cara Mengaktifkan Windows Sandbox di Windows di mana Anda dapat menemukan teknik tentang bagaimana Anda dapat memverifikasi virtualisasi.\nMenginstal VirtualBox di Windows Sekarang setelah Anda memahami manfaatnya dan telah memeriksa persyaratan sistem Anda, mari kita lanjutkan dengan proses pengunduhan:\nKlik file disini Temukan file penginstal yang diunduh di Anda Downloads folder atau di mana pun Anda menyimpannya. Klik dua kali file penginstal untuk meluncurkan VirtualBox Setup Wizard. Di layar selamat datang, klik ‚ÄúNext‚Äù untuk melanjutkan instalasi. Layar berikutnya menyajikan opsi penyesuaian untuk instalasi kotak virtual yang meliputi: Gambar contoh dengan zoom\rIkuti Perintah ini: Layar berikutnya menyajikan opsi penyesuaian untuk instalasi kotak virtual yang meliputi: Membuat ikon pintasan untuk VirtualBox di desktop Anda untuk memudahkan akses Membuat entri untuk VirtualBox di menu Mulai Anda. Adaptor jaringan memungkinkan Anda memilih adaptor yang akan digunakan VirtualBox. Opsi USB memungkinkan Anda mengonfigurasi akses perangkat USB untuk mesin virtual. Setelah Anda meninjau opsi penyesuaian, klik ‚ÄúNext‚Äù untuk melanjutkan, lalu opsi antarmuka Jaringan Peringatan muncul klik ‚ÄúYes‚Äù untuk melanjutkan instalasi. Gambar contoh dengan zoom\rWizard Siap Instal muncul, Klik ‚ÄúInstal‚Äù untuk memulai instalasi. Gambar contoh dengan zoom\rSetelah instalasi selesai, klik ‚ÄúFinish‚Äù untuk menyelesaikan proses instalasi. Membuat Mesin Virtual Pertama Setelah menyelesaikan instalasi Anda dapat meluncurkan VirtualBox dengan mencarinya di Start Menu atau menggunakan pintasan desktop.\nGambar contoh dengan zoom\rJendela VirtualBox Manager akan terbuka. Ini adalah antarmuka utama di mana Anda akan mengelola mesin virtual Anda. Untuk membuat mesin virtual pertama Anda, klik tombol ‚ÄúNew‚Äù di toolbar.\nGambar contoh dengan zoom\rWizard ‚ÄúCreate Virtual Machine‚Äù akan memandu Anda melalui proses pengaturan. Anda akan diminta untuk menentukan berbagai opsi termasuk:\nGambar contoh dengan zoom\rNama dan sistem operasi: Pilih nama deskriptif untuk mesin virtual Anda dan pilih jenis sistem operasi yang Anda rencanakan untuk diinstal. Memori RAM: Alokasikan jumlah RAM yang cukup untuk mesin virtual Anda. Harddisk: Pilih bagaimana Anda ingin membuat hard disk virtual. Anda dapat membuat hard disk virtual baru secara dinamis atau mengalokasikan ukuran tetap di muka. Gambar contoh dengan zoom\rSetelah menyelesaikan pengaturan Anda dapat melihat antarmuka VirtualBox menunjukkan sistem operasi yang diinstal di vbox. Klik ‚ÄúStart‚Äù untuk menjalankan sistem operasi.\nGambar contoh dengan zoom\rSekarang berhasil Anda dapat menjalankan sistem operasi Linux melalui VirtualBox. Penting untuk memeriksa persyaratan sistem untuk sistem operasi tamu yang Anda rencanakan untuk dipasang di dalam mesin virtual.\nCatatan Tambahan Berikut adalah catatan tambahan tentang cara menginstal kotak virtual di Windows:\nPemilihan Adaptor Jaringan: Pemilihan adaptor jaringan default akan berfungsi dalam banyak kasus. Namun, jika Anda menemukan masalah konektivitas jaringan dengan mesin virtual Anda, Anda dapat mencoba mengubah adaptor jaringan di pengaturan VirtualBox. Paket Ekstensi VirtualBox: Paket Ekstensi VirtualBox menyediakan fitur tambahan seperti dukungan USB 2.0 dan 3.0, mode mulus, dan kinerja video yang lebih baik. Meskipun tidak penting, ini dapat meningkatkan pengalaman mesin virtual Anda. Berbagi Folder: VirtualBox memungkinkan Anda untuk dengan mudah berbagi folder antara mesin Windows 10 host Anda dan sistem operasi tamu yang berjalan di dalam mesin virtual. Kesimpulan Dengan pengaturan VirtualBox, Anda sekarang dapat menjelajahi eksperimen teknik virtualisasi dengan sistem operasi yang berbeda, atau membuat lingkungan yang aman untuk menguji perangkat lunak. Ingatlah untuk mengalokasikan sumber daya yang cukup untuk mesin virtual Anda untuk memastikan kinerja optimal.\n","permalink":"https://gitkodachi.github.io/software/produktivitas/instal-vbox/"},{"title":"IBM SPSS Static","content":"IBM SPSS Statistics 27.0.1 IF026 Full IBM SPSS Statistics 27.0.1 IF026 Full merupakan software yang sangat populer untuk digunakan sebagai analisis statistik di segala bidang ilmiah, baik itu ekonomi, kedokteran, biologi, kimia, fisika, matematika, manajemen, ilmu sosial, pemerintah, dan bidang lainnya. Selain analisis statistik, SPSS juga dilengkapi manajemen data, dan dokumentasi data.\nbagi anda yang mencari software SPSS Statistics 27 Full, silahkan download filenya di bawah ini dan ikuti intruksinya agar full version\nGambar zoom\rFacilities and features of the software IBM SPSS Statistics Ability to manage and document data Includes descriptive statistics and a variety of other‚Ä¶) and components relevant like Frequencies, analysis, distribution, etc. tests Unparametric or Nonparametric and Predicting and calculating the exact Outcomes numerical Improve model building using the simulation method of Monte-Carlo (Monte Carlo method) Advanced analysis and accurate data input Ability to use the programming language Python (provided AS extension apps) Full support for Standard Unicode Ability to output to software, common office applications, etc. PDF, and also the possibility of shooting data in the form of formats common video Software Terkait Lainnya MathType 7.7.0.237 Full Version AquaSoft Stages 2025 16.1.03 Full Coolutils Total PDF Converter 6.5.0.350 Full Simpo PDF Converter Ultimate 1.5.3.0 Full Kvisoft FlipBook Maker Pro 3.6.10 Full Langkah Aktivasi Download software gunakn link di bawah. Extrak hasil download. Install ikuti menu instalasi. setealah selesai buka folder Update, lalu Copy \u0026ldquo;JRE\u0026rdquo; folder dan paste ke. C:\\Program Files\\IBM\\SPSS\\Statistics\\27 Kemudian buka folder jamu, copy dan paste ke. C:\\Program Files\\IBM\\SPSS\\Statistics\\27 Repalce yang asli. Perhatian\rakan ad info expired! abaikan saja Selelesai. Unduh üì¶ Dapatkan filenya disini üïµÔ∏è‚Äç‚ôÄÔ∏è disini\n","permalink":"https://gitkodachi.github.io/software/edukasi/spss/"},{"title":"Virtual Box","content":"VirtualBox 7.1.6.167084 Terbaru Plus Extension Pack merupakan salah satu sosftware yang berguna sebagai virtual machine installasi sistem operasi di atas windows baik itu windows linux dll.\nUntuk kita yang selalu atau hobi mendownload Operating System, alangkah baiknya di Coba dahulu menggunakan software ini, Telah lama saya jelaskan bahkan tutorial nya pun ane buatkan sudah lama. Lalu apa sih sebenarnya Fungsi utama dari software ini, apalagi sobat mungkin masih ingin terus belajar. Yups. Belajar memang tak akan ada habisnya. Ketika kita sudah menguasainya. menjadi suatu kebanggaan diri sendiri. OK. kembali ke Topik Vrtual box,\nYa.. VirtualBox 7.1.6 Merupakan software yang di rancang sebagaimana menyerupai software VMware, yang mana fungsinya untuk menguji coba Operating System atau yang berhubungan dengan Bootable\nGambar zoom\rkita ketahui meungkin anda sering mendownload Operating system, lalu anda menghabiskan berapa puluh keping saja CD atau DVD untuk menguji coba Operating tersebut, karena kegagalan Booting. Nah.. langkah baiknya.. anda perlu melakukan PEngujian dahulu. Apakah sebenarnya Operating system tersebut Mau Booting atau tidak , dan Uji cobanya kita gunakan Perangkat VIRTUAL, yakni Virtual BOX. di situ anda juga sobat dapat menginstall sampai Puluhan Sistem operasi dalam 1 Komputer, dengan Operating system komputer anda sebagai OS UTAMA nya.\nKonsep kerja nya , agar lebih mudah di pahami seperti ini\nPc/LAptop ==\u0026gt; Desktop=\u0026gt; Jalankan Software VIRTUAL BOX, =\u0026gt; Pilih Operating System yang akan Di uji ==\u0026gt; SIlahkan Tinggal Install. =\u0026gt; Selesai, dan anda akan mempunyai berbagai jenis operating system Tentunya.\nMemang kalo namanya menginstall Sisitem operasi di Perangkat Software Virtual, jalannya Terasa lambat, ya. karena Tergantung RAM yang sobat akan Alokasikan Ke Operating system Virtual tersebut.. Ingin mencoba nya.. download dulu software nya..\nTapi sobat.. kalo kita menginstall windows Xp, akan terasa ringan , apalagi sobat Install Ghost Windows Xp yang Super Ringan yang ada di Blog ini. ane nyoba pake software sejenis ini , namanya Vmware, Terasa sistem Operasi yang Di dualBooting kan.\nuntuk VirtualBox Extension Pack itu semacam add-on ataupun plug in untuk VirtualBox. Fungsinya tentu saja memberikan kemampuan dan fitur tambahan yang tidak dibawa di paket instalasi standar. Dengan menginstall VirtualBox extension pack, kita akan mendapatkan fitur tambahan untuk 1) peralatan USB 2.0, 2) VirtualBox RDP, dan 3) boot lewat PXE untuk kartu ethernet Intel ( tingkat Advanced )\nFor Windows ( Sudah Support windows 10-11) üì¶ System 64bit Dapatkan filenya disini üïµÔ∏è‚Äç‚ôÄÔ∏è disini\nFor MacoS ( Sudah Support macOS / Intel hosts) üì¶ Intel hosts Dapatkan filenya disini üïµÔ∏è‚Äç‚ôÄÔ∏è disini\nFor MacoS ( Sudah Support macOS / Apple Silicon hosts) üì¶ Apple Silicon hosts Dapatkan filenya disini üïµÔ∏è‚Äç‚ôÄÔ∏è disini\nFor Linux ( Sudah Support Ubuntu 24.04 (Noble)) üì¶ Apple Silicon hosts Dapatkan filenya disini üïµÔ∏è‚Äç‚ôÄÔ∏è disini\nCara menggunakan VirtualBox ","permalink":"https://gitkodachi.github.io/software/edukasi/vbox/"},{"title":"VLC Media Player","content":"","permalink":"https://gitkodachi.github.io/software/multimedia/vlc/"},{"title":"Winrar","content":"WinRAR 7.13 dan 6.24 Full Version Terbaru merupakan software archive sebagai compress file dalam beberapa file atau folder menjadi 1 file archive yang mudah. Siapa coba yang gak kenal namanya WINRAR , software compress dan extract file yang sangat populer, yang memudahkan kita membuat Kumpulan Folder dan file menjadi 1 PACKING .\nGambar zoom\rGambar zoom\rSoftware Terkait Lainya VSO ConvertXtoVideo Ultimate 2.0.0.26 Terbaru BurnAware 13.2 Professional Full Terbaru Kaspersky Tweak Assistant v23.11.19 Microsoft NET Framework 4.7.2.3081.0 Terbaru DVD-Cloner Gold 14.20 Build 1422 Full Version Langkah Install Setelah terdownload, Silahkan extract file, Wajib !! ini format nya Zip, dan Windows Explorer bisa Extract Zip File\nLalu Install Winrar nya dengan menjalankan Silent install.cmd Tunggu akan muncul command promt, dan enjoy full version Done full Salam luar biasa üì¶Size: 10mb | Versi 32bit dan 64bit Unduh üì¶ Dapatkan filenya disini üïµÔ∏è‚Äç‚ôÄÔ∏è disini\nNEw! Versi 7.13 untuk 64bit Download, lalu extract Buka folder dan install dari silent.install Done full üì¶Size: 4mb Unduh üì¶ Dapatkan filenya disini üïµÔ∏è‚Äç‚ôÄÔ∏è disini\n","permalink":"https://gitkodachi.github.io/software/edukasi/winrar/"}]